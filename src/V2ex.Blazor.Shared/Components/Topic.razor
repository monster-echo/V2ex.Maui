<div class="flex flex-col px-4 py-2 break-words" @onclick="GoToTopic">
    <div class="flex flex-row justify-center select-none">
        <a href="@ViewModel.AvatarLink"
            class="w-10 h-10 flex flex-row items-center mr-2 rounded-full shadow-md overflow-hidden"
            @onclick:stopPropagation="true">
            @if (!string.IsNullOrEmpty(ViewModel.Avatar))
            {
                <img src="@ViewModel.Avatar" class="w-full h-full" alt="avatar">
            }
        </a>

        <div class="flex flex-col flex-1 justify-center">
            <div class="flex flex-row ">
                <a href="@ViewModel.UserLink" @onclick:stopPropagation="true">
                    <span class="text-sm text-gray-900">@ViewModel.UserName</span>
                </a>
            </div>

            <div class="flex flex-row space-x-2">
                @if (ViewModel.Replies > 0 &&  ViewModel.LastRepliedText != null )
                {
                    <span class="text-sm text-gray-500">@ViewModel.LastRepliedText</span>
                }

                @if (ViewModel.NodeName != null)
                {
                    <span class="text-sm text-gray-500 ">评论 @ViewModel.Replies</span>
                }
            </div>
        </div>

        <div class="flex items-center ">
            @if (ViewModel.NodeName != null)
            {
                <a href="@ViewModel.NodeLink" @onclick:stopPropagation="true">
                    <span class="text-sm text-gray-50 bg-gray-400 rounded-full px-2 py-1">@ViewModel.NodeName</span>
                </a>
            }
            else
            {
                <span class="text-sm text-gray-50 bg-gray-400 rounded-full px-2 py-1">@ViewModel.Replies</span>
            }
        </div>
    </div>

    <div class="flex flex-row py-2 select-auto cursor-pointer">
        <span class="text-md text-gray-900">@ViewModel.Title</span>
    </div>
</div>

@code {

    [Parameter]
    public TopicViewModel ViewModel { get; set; } = null!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    private TopicHistoryService TopicHistoryService { get; set; } = null!;
    [Inject]
    private ILogger<Topic> Logger { get; set; } = null!;
    override protected void OnInitialized()
    {
        
    }


    private void GoToTopic()
    {
        if (string.IsNullOrEmpty(ViewModel.Id))
        {
            return;
        }

        this.TopicHistoryService.Push(new Services.Topic(
            this.ViewModel.Id,
            this.ViewModel.Title.ToString(),
            this.ViewModel.UserName,
            this.ViewModel.Avatar,
            this.ViewModel.NodeName,
            this.ViewModel.Replies
        ));
        this.NavigationManager.NavigateTo($"/t/{ViewModel.Id}");
        this.Logger.LogInformation($"GoToTopic {ViewModel.Id}");
    }
}