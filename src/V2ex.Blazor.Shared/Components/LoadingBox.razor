@using DebounceThrottle

@if(errorMessage != null)
{
    <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2">
        <div class="p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400" role="alert">
            <span class="font-medium">错误信息!</span>@errorMessage
        </div>
    </div>
}
else
{
    @if (childContent == null)
    {
        @Loading
    }
    else
    {
        <div class="h-full overflow-y-auto">
            @childContent
        </div>
    }
}

@code {
    [Parameter]
    public Func<Task> Load { get; set; } = null!;

    [Parameter]
    public RenderFragment? Loading { get; set; }

    [Parameter]
    public RenderFragment? Content { get; set; }

    [Parameter]
    public bool IsManual { get; set; }

    private string? errorMessage;

    private RenderFragment? childContent;

    private DebounceDispatcher debounceDispatcher = new DebounceDispatcher(500);

    protected override async Task OnInitializedAsync()
    {
        if (!IsManual)
        {
            await InvokeAsync();
        }
    }

    public async Task InvokeAsync()
    {
        childContent = null;

        this.StateHasChanged();

        try
        {
            await debounceDispatcher.DebounceAsync(async () =>
            {
                await Load();
            });

            childContent = this.Content;
        }
        catch (Exception exception)
        {
            errorMessage = exception.Message;
        }
       
        this.StateHasChanged();
    }
}
