@typeparam TItem
@implements IDisposable

<div id="collection-view" class="h-full">
    <ScrollView @ref="scrollView" OnScrollCallback="OnScroll">
        <div class="h-full flex flex-col">
            @if (Header != null)
            {
                @Header
            }

            @if (Items == null)
            {
                @Empty
            }
            else
            {
                <div class="grid grid-cols-1 divide-y">
                    @foreach (var item in Items)
                    {
                        @ItemContent(item)
                    }
                </div>
            }

            @if (Footer != null)
            {
                @Footer
            }
        </div>
    </ScrollView>
</div>
@code {

    [Parameter]
    public IEnumerable<TItem>? Items { get; set; }

    [Parameter]
    public RenderFragment<TItem> ItemContent { get; set; } = null!;

    [Parameter]
    public RenderFragment? Header { get; set; }

    [Parameter]
    public RenderFragment? Footer { get; set; }

    [Parameter]
    public RenderFragment? Empty { get; set; }

    [Parameter]
    public EventCallback RemainingReachedCallback { get; set; }

    [Parameter] 
    public EventCallback<ScrollEventArgs> OnScrollCallback { get; set; }


    [Inject]
    private IJSRuntime JsRuntime { get; set; } = null!;
    private ScrollView? scrollView;

    private DotNetObjectReference<CollectionView<TItem>>? thisRef;
    private IJSObjectReference? interopModule;

    protected override void OnInitialized()
    {
        thisRef = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            interopModule = await this.JsRuntime.InvokeAsync<IJSObjectReference>("import",
            "./_content/V2ex.Blazor.Shared/Components/CollectionView.razor.js");
            await interopModule.InvokeVoidAsync("initialize", thisRef);
        }
    }

    [JSInvokable]
    public async Task RemainingReachedJsInvoke()
    {
        await RemainingReachedCallback.InvokeAsync();
    }

    private async Task OnScroll(ScrollEventArgs e)
    {
        await OnScrollCallback.InvokeAsync(e);
    }

    public async ValueTask ScrollToTop()
    {
        if(scrollView == null){ return; }
        await scrollView.ScrollToTop();
    }

    public void Dispose()
    {
        interopModule?.DisposeAsync();
    }
}
