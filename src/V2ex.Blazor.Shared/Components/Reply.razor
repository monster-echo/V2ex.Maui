<div class="flex flex-col px-4 py-2 ">

    <div class="flex flex-row justify-start items-start ">
        <a href="@ViewModel.Avatar" class="flex flex-row items-start justify-start justify-items-start select-none">
            <img class="w-12 h-12" src="@ViewModel.Avatar" alt="avatar">
        </a>

        <div class="flex flex-col flex-1 mx-2 space-y-2 ">            
            <div class="flex flex-row select-none space-x-2 items-center">
                <a href="@ViewModel.UserLink" class=" ">
                    <span class="text-sm text-gray-900">@ViewModel.UserName</span>
                </a>
                @if (IsOp)
                {
                    <span class="uppercase rounded-md text-xs border border-2 text-blue-300 border-blue-300 p-0.5">OP</span>
                }

                <span class="text-sm text-gray-500">@ViewModel.ReplyTimeText</span>
            </div>

            <MarkupStringView Content="ViewModel.Content" MemberClickedCallback="OnCallupAsync"></MarkupStringView>

            <div class="text-gray-400 text-sm select-none">@ViewModel.Floor 楼</div>
        </div>
        
        @if (ViewModel.AlreadyThanked > 0)
        {
            var svgClass = ViewModel.Thanked ? "fill-gray-400" : "fill-red-400";
            <span class="flex flex-row items-center space-x-1 text-gray-400 text-sm">
                <span class="">@ViewModel.AlreadyThanked</span>

                <svg xmlns="http://www.w3.org/2000/svg" class="@svgClass"
                     height="1em" viewBox="0 0 512 512">
                    <!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->
                    <path d="M225.8 468.2l-2.5-2.3L48.1 303.2C17.4 274.7 0 234.7 0 192.8v-3.3c0-70.4 50-130.8 119.2-144C158.6 37.9 198.9 47 231 69.6c9 6.4 17.4 13.8 25 22.3c4.2-4.8 8.7-9.2 13.5-13.3c3.7-3.2 7.5-6.2 11.5-9c0 0 0 0 0 0C313.1 47 353.4 37.9 392.8 45.4C462 58.6 512 119.1 512 189.5v3.3c0 41.9-17.4 81.9-48.1 110.4L288.7 465.9l-2.5 2.3c-8.2 7.6-19 11.9-30.2 11.9s-22-4.2-30.2-11.9zM239.1 145c-.4-.3-.7-.7-1-1.1l-17.8-20c0 0-.1-.1-.1-.1c0 0 0 0 0 0c-23.1-25.9-58-37.7-92-31.2C81.6 101.5 48 142.1 48 189.5v3.3c0 28.5 11.9 55.8 32.8 75.2L256 430.7 431.2 268c20.9-19.4 32.8-46.7 32.8-75.2v-3.3c0-47.3-33.6-88-80.1-96.9c-34-6.5-69 5.4-92 31.2c0 0 0 0-.1 .1s0 0-.1 .1l-17.8 20c-.3 .4-.7 .7-1 1.1c-4.5 4.5-10.6 7-16.9 7s-12.4-2.5-16.9-7z" />
                </svg>
            </span>
        }
        else
        {
            <button @onclick="TapThank">
                <span class="flex flex-row items-center space-x-1 text-gray-400 text-sm">
                    <svg xmlns="http://www.w3.org/2000/svg" class="fill-gray-400"
                         height="1em" viewBox="0 0 512 512">
                        <!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->
                        <path d="M225.8 468.2l-2.5-2.3L48.1 303.2C17.4 274.7 0 234.7 0 192.8v-3.3c0-70.4 50-130.8 119.2-144C158.6 37.9 198.9 47 231 69.6c9 6.4 17.4 13.8 25 22.3c4.2-4.8 8.7-9.2 13.5-13.3c3.7-3.2 7.5-6.2 11.5-9c0 0 0 0 0 0C313.1 47 353.4 37.9 392.8 45.4C462 58.6 512 119.1 512 189.5v3.3c0 41.9-17.4 81.9-48.1 110.4L288.7 465.9l-2.5 2.3c-8.2 7.6-19 11.9-30.2 11.9s-22-4.2-30.2-11.9zM239.1 145c-.4-.3-.7-.7-1-1.1l-17.8-20c0 0-.1-.1-.1-.1c0 0 0 0 0 0c-23.1-25.9-58-37.7-92-31.2C81.6 101.5 48 142.1 48 189.5v3.3c0 28.5 11.9 55.8 32.8 75.2L256 430.7 431.2 268c20.9-19.4 32.8-46.7 32.8-75.2v-3.3c0-47.3-33.6-88-80.1-96.9c-34-6.5-69 5.4-92 31.2c0 0 0 0-.1 .1s0 0-.1 .1l-17.8 20c-.3 .4-.7 .7-1 1.1c-4.5 4.5-10.6 7-16.9 7s-12.4-2.5-16.9-7z" />
                    </svg>
                </span>
            </button>
        }
    </div>
</div>

@code {
    [Parameter]
    public ReplyViewModel ViewModel { get; set; } = null!;

    [Parameter]
    public bool IsOp { get; set; }

    [Parameter]
    public EventCallback<CallupModel> CallupCallback { get; set; }

    [Inject]
    public CurrentUser CurrentUser{ get; set; } = null!;

    [Inject]
    private ApiService ApiService { get; set; } = null!;

    [Inject]
    private ILogger<Reply> Logger { get; set; } = null!;
    [Inject]
    private IToast Toast { get; set; } = null!;


    private async Task TapThank()
    {
        if (ViewModel == null || string.IsNullOrEmpty(ViewModel.Id) ||
           string.IsNullOrEmpty(ViewModel.Once) ||
           !this.CurrentUser.IsAuthenticated ||
           this.ViewModel.Thanked)
        {
            return;
        }
        try
        {
            await this.ApiService.ThanksReplier(this.ViewModel.Id, this.ViewModel.Once);
            this.ViewModel.Thanked = true;
            this.ViewModel.AlreadyThanked = this.ViewModel.AlreadyThanked + 1;

            // this.Toast.Success("感谢成功");
        }
        catch (Exception exception)
        {
            this.Logger.LogWarning(exception, "Can not thank reply");

            // this.Toast.
        }
    }

    private Task OnCallupAsync(string username)
    {
        return CallupCallback.InvokeAsync(new(username,this.ViewModel.Floor));
    }
}