@using V2ex.Blazor.Pages
<div class="flex flex-col px-4 py-2 ">
    <div class="flex flex-row justify-start items-start ">
        <a href="@ViewModel.UserLink" class="flex flex-row items-start justify-start justify-items-start select-none">
            <img class="w-8 h-8 rounded-full shadow-md" src="@ViewModel.Avatar" alt="avatar">
        </a>

        <div class="flex flex-col flex-1 mx-2 space-y-2 ">
            <div class="flex flex-row items-center w-full">
                <a href="@ViewModel.UserLink" class=" ">
                    <div class="flex items-start flex-col md:flex-row md:items-center md:space-x-2 ">
                        <div class="flex space-x-2 items-center">
                            <span class="text-sm text-gray-900">@ViewModel.UserName</span>
                            @if (IsOp)
                            {
                                <span
                                    class="uppercase rounded-md text-xs border-2 text-blue-300 border-blue-300 p-0.5 scale-75 ">OP</span>
                            }
                        </div>

                        <span class="text-xs text-gray-500 whitespace-nowrap text-ellipsis md:text-sm">@ViewModel.ReplyTimeText</span>
                    </div>
                </a>
                <div class="ml-auto">
                    @if (ViewModel.Thanked)
                    {
                        <span class="flex flex-row items-center space-x-1 text-sm ">
                            @if (ViewModel.Thanks > 0)
                            {
                                <span class="">@ViewModel.Thanks</span>
                            }
                            <svg xmlns="http://www.w3.org/2000/svg" class="fill-red-400" height="16" width="16"
                                viewBox="0 0 512 512">
                                <!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.-->
                                <path
                                    d="M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9L464.4 300.4c30.4-28.3 47.6-68 47.6-109.5v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5z" />
                            </svg>
                        </span>
                    }
                    else
                    {
                        <button @onclick="TapThank" class="flex flex-row items-center space-x-1 text-sm cursor-pointer text-gray-400">
                            @if (ViewModel.Thanks > 0)
                            {
                                <span class="">@ViewModel.Thanks</span>
                            }
                            <span class="flex flex-row items-center space-x-1  ">
                                <svg xmlns="http://www.w3.org/2000/svg" class="fill-gray-400" height="1em"
                                    viewBox="0 0 512 512">
                                    <!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->
                                    <path
                                        d="M225.8 468.2l-2.5-2.3L48.1 303.2C17.4 274.7 0 234.7 0 192.8v-3.3c0-70.4 50-130.8 119.2-144C158.6 37.9 198.9 47 231 69.6c9 6.4 17.4 13.8 25 22.3c4.2-4.8 8.7-9.2 13.5-13.3c3.7-3.2 7.5-6.2 11.5-9c0 0 0 0 0 0C313.1 47 353.4 37.9 392.8 45.4C462 58.6 512 119.1 512 189.5v3.3c0 41.9-17.4 81.9-48.1 110.4L288.7 465.9l-2.5 2.3c-8.2 7.6-19 11.9-30.2 11.9s-22-4.2-30.2-11.9zM239.1 145c-.4-.3-.7-.7-1-1.1l-17.8-20c0 0-.1-.1-.1-.1c0 0 0 0 0 0c-23.1-25.9-58-37.7-92-31.2C81.6 101.5 48 142.1 48 189.5v3.3c0 28.5 11.9 55.8 32.8 75.2L256 430.7 431.2 268c20.9-19.4 32.8-46.7 32.8-75.2v-3.3c0-47.3-33.6-88-80.1-96.9c-34-6.5-69 5.4-92 31.2c0 0 0 0-.1 .1s0 0-.1 .1l-17.8 20c-.3 .4-.7 .7-1 1.1c-4.5 4.5-10.6 7-16.9 7s-12.4-2.5-16.9-7z" />
                                </svg>
                            </span>
                        </button>
                    }
                </div>
            </div>

            <MarkupStringView Content="ViewModel.Content" MemberClickedCallback="OnCallUpAsync"
                ExternalLinkClickedCallback="OnExternalLickClicked"></MarkupStringView>

            <div class="flex flex-row items-center">
                <div class="text-gray-400 text-sm select-none"># @ViewModel.Floor </div>
                <div class="flex-1"></div>
                @if(ViewModel.Replies.Count > 0 || ViewModel.Mentions.Count > 0)
                {
                    <button class="flex items-center text-sm text-gray-400 space-x-1" @onclick="OnCallUpAllAsync">
                        @if(ViewModel.Replies.Count > 0){<span>@ViewModel.Replies.Count</span>}
                        <svg class="w-4 h-4 text-gray-400 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 18">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 5h2a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1h-2v3l-4-3H8m4-13H2a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h2v3l4-3h4a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1Z"/>
                        </svg>
                        <span>对话</span>
                    </button>
                }

                @if (MentionCallback.HasDelegate && this.CurrentUser != null && this.CurrentUser.IsAuthenticated)
                {
                    <button class="flex items-center text-sm text-gray-400 space-x-1 ms-2" @onclick="TapMention">
                        <svg class="w-4 h-4 text-gray-400 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12.5 4.046H9V2.119c0-.921-.9-1.446-1.524-.894l-5.108 4.49a1.2 1.2 0 0 0 0 1.739l5.108 4.49C8.1 12.5 9 11.971 9 11.051V9.123h2a3.023 3.023 0 0 1 3 3.046V15a5.593 5.593 0 0 0-1.5-10.954Z"/>
                        </svg>
                        <span>回复</span>
                    </button>
                }

                <button class="ms-4">
                    <svg class="w-4 h-4 text-gray-400 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 4 15">
                        <path d="M3.5 1.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Zm0 6.041a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Zm0 5.959a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z" />
                    </svg>
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public ReplyViewModel ViewModel { get; set; } = null!;

    [CascadingParameter]
    public TopicPageViewModel TopicPageViewModel { get; set; } = null!;

    [Parameter]
    public bool IsOp { get; set; }

    [Parameter]
    public EventCallback<CallUpModel> CallUpCallback { get; set; }

    [Parameter]
    public EventCallback<int> MentionCallback{ get; set; }

    public CurrentUser? CurrentUser;

    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    [Inject]
    private ApiService ApiService { get; set; } = null!;

    [Inject]
    private ILogger<Reply> Logger { get; set; } = null!;
    [Inject]
    private IToastService Toast { get; set; } = null!;

    [Inject]
    private IBrowser Browser { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        if (AuthenticationStateTask != null)
        {
            CurrentUser = new CurrentUser((await AuthenticationStateTask).User);
        }
        if (ViewModel != null)
        {
            ViewModel.StateChanged = () => StateHasChanged();
        }
    }

    private Task TapMention()
    {
        return MentionCallback.InvokeAsync(ViewModel.Floor);
    }


    private async Task TapThank()
    {
        if (ViewModel == null 
            || string.IsNullOrEmpty(ViewModel.NormalizedId) 
            || string.IsNullOrEmpty(TopicPageViewModel.Once) 
            || (this.CurrentUser != null && !this.CurrentUser.IsAuthenticated) 
            || this.ViewModel.Thanked)
        {
            return;
        }
        try
        {
            await this.ApiService.ThanksReplier(this.ViewModel.NormalizedId, this.TopicPageViewModel.Once);
            this.ViewModel.Thanked = true;
            this.ViewModel.Thanks = this.ViewModel.Thanks + 1;

            await this.Toast.Show("感谢成功");
        }
        catch (Exception exception)
        {
            this.Logger.LogWarning(exception, "Can not thank reply");
            await this.Toast.Show("感谢失败");
        }
    }

    private Task OnCallUpAsync(string username)
    {
        return CallUpCallback.InvokeAsync(new(username, this.ViewModel.Floor, ViewModel));
    }

    private Task OnCallUpAllAsync()
    {
        return OnCallUpAsync("");
    }

    private Task OnExternalLickClicked(Uri uri)
    {
        return Browser.OpenAsync(uri);
    }
}