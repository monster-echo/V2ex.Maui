@inherits LayoutComponentBase
<div class="flex flex-col w-full h-screen antialiased bg-gray-50 dark:bg-gray-900">
    <div class="flex flex-row bg-white dark:bg-gray-800">
        <button @onclick="Return"
            class="px-4 inline-flex items-center text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600">
            <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                fill="none" viewBox="0 0 6 10">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M5 1 1 5l4 4" />
            </svg>
        </button>
        <NavBar></NavBar>
        <SideBar></SideBar>
    </div>
    <div class="flex-auto overflow-x-hidden overflow-y-auto sm:ml-64">
        <ErrorBoundary>
            <ChildContent>
                @Body
            </ChildContent>
            <ErrorContent Context="ex">
                @{
                    OnError(@ex);
                }

                <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2">
                    @if (AppConstants.IsDebug)
                    {
                        <p class="errorUI">😈 @ex.Message</p>
                    }
                    else
                    {
                        <p class="errorUI">😈 Unhandled error, Sorry!</p>
                    }
                </div>
            </ErrorContent>
        </ErrorBoundary>
    </div>

</div>

@code {

    [Inject] private INavigator Navigator { get; set; } = null!;

    [Inject]
    private ILogger<Main> Logger { get; set; } = null!;
    [Inject] private IJSRuntime JsRuntime { get; set; } = null!;
    private IJSObjectReference? interopModule;
    private void OnError(Exception ex)
    {
        this.Logger.LogError(ex, "OnError");
    }

    private void Return()
    {
        this.Navigator.GoBack();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            interopModule = await this.JsRuntime.InvokeAsync<IJSObjectReference>("import",
            "./_content/V2ex.Blazor.Shared/Components/Shared/ReturnLayout.razor.js");
        }

        if (interopModule is not null)
        {
            await interopModule.InvokeVoidAsync("initialize");
        }
    }
}
