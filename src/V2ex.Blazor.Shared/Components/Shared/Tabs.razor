@using System.Diagnostics
<div class="w-full bg-white border-t border-gray-200 dark:bg-gray-800 dark:border-gray-700">
    <div class="swiper swiper-tabs w-full">
        <ul class="swiper-wrapper text-sm font-medium text-center text-gray-500 dark:text-gray-400">

            @for(var i = 0; i < tabs.Count; i++)
            {
                var copyIndex = i;
                var tab = tabs[copyIndex];
                var className = "select-none w-full inline-flex whitespace-nowrap items-center justify-center p-4 border-b-2 hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300 group";

                if (copyIndex == SelectedIndex)
                {
                    className += " border-indigo-500 text-indigo-600  border-gray-300 dark:border-indigo-500 dark:text-indigo-500";
                }
                else
                {
                    className += " border-transparent text-gray-500 dark:text-gray-400";
                }

                <li @key="copyIndex" @ref="TabRef" class="swiper-slide mr-2 snap-center">
                    <a class="@className"
                        onclick:preventDefault="true"
                        @onclick="()=>ClickTab(copyIndex)">
                        @tab.Description
                    </a>
                </li>
            }
        </ul>
    </div>
</div>

@code
{
    [Parameter]
    public string? Tab { get; set; }
    [Inject] private UtilsJsInterop Utils { get; set; } = null!;
    [Inject] private IJSRuntime JsRuntime { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private Microsoft.Extensions.Logging.ILogger<Tabs> Logger { get; set; } = null!;

    private IReadOnlyList<TabDefinition> tabs = null!;
    private IJSObjectReference? interopModule;
    private List<ElementReference> tabRefs = new();

    private ElementReference TabRef
    {
        set
        {
            tabRefs.Add(value);
        }
    }

    private int SelectedIndex {get;set;}
    protected override void OnInitialized()
    {
        tabs = TabDefinition.GetTabDefinitions();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if(Tab is null)
        {
            SelectedIndex = 0;
            return;
        }
        else
        {
            var index = tabs.ToList().FindIndex(x => x.Name == Tab);
            if(index!=-1)
            {
                SelectedIndex = index;
            }
            else
            {
                SelectedIndex = 0;
            }
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            interopModule = await this.JsRuntime.InvokeAsync<IJSObjectReference>("import",
                "./_content/V2ex.Blazor.Shared/Components/Shared/Tabs.razor.js");

        }

        if (interopModule is not null)
        {
            await interopModule.InvokeVoidAsync("initializeSwiper");
            this.Logger.LogInformation("Initializing swiper");
        }
    }

    private Task ClickTab(int index)
    {
        SelectedIndex=index;
        var tab = tabs[index];

        if(tabRefs.Count>index)
        {
            Utils.ScrollToElement(tabRefs[index]);
        }

        NavigationManager.NavigateTo($"/?tab={tab.Name}");
        return Task.CompletedTask;
    }
}