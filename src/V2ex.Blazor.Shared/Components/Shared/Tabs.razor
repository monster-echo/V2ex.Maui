<div class="w-full bg-white border-t border-gray-200 dark:bg-gray-800 dark:border-gray-700">
    <div class="swiper swiper-tabs w-full">
        <ul class="swiper-wrapper text-sm font-medium text-center text-gray-500 dark:text-gray-400">

            @for(var i = 0; i < tabs.Count; i++)
            {
                var copyIndex = i;
                var tab = tabs[copyIndex];
                var className = "select-none w-full inline-flex whitespace-nowrap items-center justify-center p-4 border-b-2 hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300 group";

                if (copyIndex == SelectedIndex)
                {
                    className += " border-indigo-500 text-indigo-600  border-gray-300 dark:border-indigo-500 dark:text-indigo-500";
                }
                else
                {
                    className += " border-transparent text-gray-500 dark:text-gray-400";
                }

                <li @key="copyIndex" @ref="TabRef" class="swiper-slide mr-2 snap-center">
                    <a class="@className"
                        @onclick="()=>{
                            SelectedIndex=copyIndex;
                        }">
                        @tab.Description
                    </a>
                </li>
            }
        </ul>
    </div>
</div>

@code
{
    [Inject] private UtilsJsInterop Utils { get; set; } = null!;
    [Inject] private IJSRuntime JsRuntime { get; set; } = null!;

    private IReadOnlyList<TabDefinition> tabs = null!;
    private int _selectedIndex;

    private List<ElementReference> tabRefs = new();

    private ElementReference TabRef
    {
        set
        {
            tabRefs.Add(value);
        }
    }

    private int SelectedIndex
    {
        get
        {
            return _selectedIndex;
        }
        set
        {
            _selectedIndex = value;
            Utils.ScrollToElement(tabRefs[_selectedIndex]);
        }
    }

    protected override void OnInitialized()
    {
        tabs = TabDefinition.GetTabDefinitions();
    }

    override protected async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var module = await this.JsRuntime.InvokeAsync<IJSObjectReference>("import",
                "./_content/V2ex.Blazor.Shared/Components/Shared/Tabs.razor.js");
        }
    }
}