<div class="flex flex-col w-full" @ref="containerRef">
    <div class="flex-row w-full">
        <div id="editor" onblur="this.focus()" @onclick="OnEditorClick"
            class="rounded-lg border-2 border-gray-200 bg-gray-50 text-xl min-h-[8rem]"></div>
    </div>

   
    <div id="toolbar" class="flex flex-row w-full items-center justify-center sticky bottom-0 py-2 bg-white">
        <button class="ql-emoji p-2 rounded-lg " @onclick="ShowEmojiPanel">
            <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                fill="none" viewBox="0 0 20 20">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M13.408 7.5h.01m-6.876 0h.01M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0ZM4.6 11a5.5 5.5 0 0 0 10.81 0H4.6Z" />
            </svg>
        </button>

        @{
            var chooseImageClass = "rounded-lg ql-image p-2 disabled:bg-gray-500/90 " + (isUploading ? "disabled" : "");
        }

        <button class="@chooseImageClass" @onclick="ChooseImage" disabled="@isUploading">
            @if (isUploading)
            {
                <div role="status">
                    <svg aria-hidden="true" class="w-6 h-6 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor" />
                        <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill" />
                    </svg>
                    <span class="sr-only">Loading...</span>
                </div>
            }
            else
            {
                <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                     fill="none" viewBox="0 0 20 18">
                    <path fill="currentColor"
                          d="M13 5.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM7.565 7.423 4.5 14h11.518l-2.516-3.71L11 13 7.565 7.423Z" />
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M18 1H2a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1Z" />
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M13 5.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM7.565 7.423 4.5 14h11.518l-2.516-3.71L11 13 7.565 7.423Z" />
                </svg>
            }
        </button>

        @{
            var replyButtonClass = "px-4 py-2 ml-auto bg-gray-400/20 rounded-lg flex flex-row space-x-2 items-center disabled:bg-gray-500/90" + (isUploading ?
            "disabled" : "");
        }
        <button class="@replyButtonClass" @onclick="ReplyAsync" disabled="@(isUploading||isReplying)">
            @if (isReplying)
            {
                <div role="status">
                    <svg aria-hidden="true" class="w-6 h-6 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor" />
                        <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill" />
                    </svg>
                    <span class="sr-only">Loading...</span>
                </div>
            }
            <span>
                回复
            </span>
        </button>
    </div>

    @if (isEmojiShow)
    {
        <div class="flex flex-col w-full pt-0">
            @if (recentEmojis.Any())
            {
                <div class="flex flex-col space-y-2">
                    <div class="text-gray-500 font-semibold">最近使用</div>
                    <div class="flex flex-wrap ">
                        @foreach (var item in recentEmojis)
                        {
                            if (item is TextEmoji textItem)
                            {
                                <button class="p-2" @onclick="()=> ChooseTextEmoji(textItem)">
                                    @item.Name
                                </button>
                            }
                            else if (item is ImageEmoji imageEmoji)
                            {
                                <button class="p-2" @onclick="()=> ChooseImageEmoji(imageEmoji)">
                                    <img src="@imageEmoji.Low" alt="@imageEmoji.Name" />
                                </button>
                            }
                        }
                    </div>
                </div>
            }

            @foreach (var category in emojiCategories)
            {
                <div class="flex flex-col space-y-2">
                    <div class="text-gray-500 font-semibold">@category.Key</div>
                    <div class="flex flex-wrap ">
                        @foreach (var item in category.Value)
                        {
                            if(item is TextEmoji textItem)
                            {
                                <button class="p-2" @onclick="()=> ChooseTextEmoji(textItem)">
                                    @item.Name
                                </button>
                            }
                            else if(item is ImageEmoji imageEmoji)
                            {
                                <button class="p-2" @onclick="()=> ChooseImageEmoji(imageEmoji)">
                                    <img src="@imageEmoji.Low" alt="@imageEmoji.Name" />
                                </button>
                            }
                        }
                    </div>
                </div>
            }
        </div>
    }

</div>

@code {
    private bool isEmojiShow = false;

    [Parameter]
    public EventCallback<string> ReplyCallback { get; set; }

    [Inject]
    private EmojiService EmojiService { get; set; } = null!;

    [Inject]
    private IJSRuntime JsRuntime { get; set; } = null!;
    [Inject]
    private IToastService Toast { get; set; } = null!;
    private ElementReference? containerRef;
    private DotNetObjectReference<ReplyInput>? thisRef;
    private IJSObjectReference? interopModule;
    private IJSObjectReference? quillRef;
    private bool isUploading, isReplying;
    private Dictionary<string, List<IEmoji>> emojiCategories = [];
    private List<IEmoji> recentEmojis = [];

    protected override void OnInitialized()
    {
        this.thisRef = DotNetObjectReference.Create(this);
    }

    protected override async Task OnInitializedAsync()
    {
        this.emojiCategories = await this.EmojiService.GetListAsync();
        this.recentEmojis = await this.EmojiService.GetRecentListAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            interopModule = await this.JsRuntime.InvokeAsync<IJSObjectReference>("import",
            "./_content/V2ex.Blazor.Shared/Components/ReplyInput.razor.js");
            quillRef = await interopModule.InvokeAsync<IJSObjectReference>("initialize", containerRef, thisRef);
        }
    }

    private Task OnEditorClick()
    {
        isEmojiShow = false;
        return Task.CompletedTask;
    }

    private Task ShowEmojiPanel()
    {
        isEmojiShow = true;
        return Task.CompletedTask;
    }

    private async Task ChooseTextEmoji(TextEmoji emoji)
    {
        if (interopModule == null)
        {
            return;
        }

        await this.EmojiService.SetRecentAsync(emoji);

        await this.interopModule.InvokeVoidAsync("insertTextEmoji", quillRef, emoji.Name);
    }

    private async Task ChooseImageEmoji(ImageEmoji emoji)
    {
        if (interopModule == null)
        {
            return;
        }
        await this.EmojiService.SetRecentAsync(emoji);
        await this.interopModule.InvokeVoidAsync("insertImageEmoji", quillRef, emoji.High);
    }

    private async Task ChooseImage()
    {
        try
        {
            if (interopModule == null)
            {
                return;
            }
            isUploading = true;
            await this.interopModule.InvokeVoidAsync("chooseImage", quillRef, thisRef);
            await this.Toast.Show("图片上传成功");
        }
        catch (JSException e)
        {
            if (e.Message == "cancel")
            {
                //swallow it.
                return;
            }
            await this.Toast.Show($"图片上传失败: {e.Message}");
        }
        finally
        {
            isUploading = false;
        }

    }

    public async Task ReplyAsync()
    {
        if (interopModule == null)
        {
            return;
        }
        try
        {
            isReplying = true;

            await this.InvokeAsync(this.StateHasChanged);

            var replyContent = await interopModule.InvokeAsync<string>("getQuillContents", quillRef);

            if (string.IsNullOrEmpty(replyContent))
            {
                return;
            }

            await this.ReplyCallback.InvokeAsync(replyContent);

            await this.interopModule.InvokeVoidAsync("clearQuill", quillRef);
        }
        finally
        {
            isReplying = false;
        }
    }
}
