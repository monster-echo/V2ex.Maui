<div class="flex flex-col w-full space-y-2" @ref="containerRef">
    <div class="flex-row w-full">
        <div id="editor" onblur="this.focus()" @onclick="OnEditorClick"
            class="rounded-lg border-2 border-gray-200 bg-gray-50 text-xl"></div>
    </div>

    @if (isEmojiShow)
    {
        <div class="flex flex-col w-full">
            <div class="flex flex-col space-y-2">
                <div class="text-gray-500 font-semibold">经典表情</div>
                <div class="flex flex-wrap ">
                    @foreach (var item in classicEmoticons)
                    {
                        <button class="p-2" @onclick="()=> ChooseClassic(item)">
                            <img src="@item.Low" alt="@item.Name" />
                        </button>
                    }
                </div>
            </div>

            @foreach (var item in emojiEmoticons)
            {
                <div class="flex flex-col space-y-2">
                    <div class="text-gray-500 font-semibold">@item.Key</div>
                    <div class="flex flex-wrap text-xl">
                        @foreach (var emojiItem in item.Value)
                        {
                            <button class="p-2" @onclick="()=>ChooseEmoji(emojiItem)">
                                @emojiItem
                            </button>
                        }
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div id="toolbar" class="flex flex-row w-full items-center justify-center">
            <button class="ql-emoji p-2 rounded-lg " @onclick="ShowEmojiPanel">
                <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                    fill="none" viewBox="0 0 20 20">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M13.408 7.5h.01m-6.876 0h.01M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0ZM4.6 11a5.5 5.5 0 0 0 10.81 0H4.6Z" />
                </svg>
            </button>

            @{
                var chooseImageClass = "rounded-lg ql-image p-2 disabled:bg-gray-500/90 " + (isUploading ? "disabled" : "");
            }

            <button class="@chooseImageClass" @onclick="ChooseImage" disabled="@isUploading">
                <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                    fill="none" viewBox="0 0 20 18">
                    <path fill="currentColor"
                        d="M13 5.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM7.565 7.423 4.5 14h11.518l-2.516-3.71L11 13 7.565 7.423Z" />
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M18 1H2a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1Z" />
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M13 5.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0ZM7.565 7.423 4.5 14h11.518l-2.516-3.71L11 13 7.565 7.423Z" />
                </svg>
            </button>

            @{
                var replyButtonClass = "px-4 py-2 ml-auto bg-gray-400/20 rounded-lg disabled:bg-gray-500/90" + (isUploading ?
                "disabled" : "");
            }
            <button class="@replyButtonClass" @onclick="ReplyAsync" disabled="@(isUploading||isReplying)">
                回复
            </button>
        </div>
    }

</div>

@code {
    private bool isEmojiShow = false;

    [Parameter]
    public EventCallback<string> ReplyCallback { get; set; }

    private Dictionary<string, List<string>> emojiEmoticons = new()
{
{
"小黄脸",
new () {
"😀",
"😁",
"😂",
"🤣",
"😅",
"😊",
"😋",
"😘",
"🥰",
"😗",
"🤩",
"🤔",
"🤨",
"😐",
"😑",
"🙄",
"😏",
"😪",
"😫",
"🥱",
"😜",
"😒",
"😔",
"😨",
"😰",
"😱",
"🥵",
"😡",
"🥳",
"🥺",
"🤭",
"🧐",
"😎",
"🤓",
"😭",
"🤑",
"🤮"
}
},
{
"手势",
new ()
{
"🙋",
"🙎",
"🙅",
"🙇",
"🤷",
"🤏",
"👉",
"✌️",
"🤘",
"🤙",
"👌",
"🤌",
"👍",
"👎",
"👋",
"🤝",
"🙏",
"👏"
}
},
{
"庆祝",
new ()
{
"✨", "🎉", "🎊"
}
},
{
"其他",
new ()
{
"👻", "🤡", "🐔", "👀", "💩", "🐴", "🦄", "🐧", "🐶", "🐒", "🙈", "🙉", "🙊", "🐵"
}
}
};

    private List<(string Name, string Low, string High)> classicEmoticons = new()
{
("[狗头]","https://i.imgur.com/io2SM1h.png","https://i.imgur.com/0icl60r.png"),
("[马]","https://i.imgur.com/8EKZv7I.png","https://i.imgur.com/ANFUX52.png"),
("[不高兴]","https://i.imgur.com/huX6coX.png","https://i.imgur.com/N7JEuvc.png"),
("[呵呵]","https://i.imgur.com/RvoLAbX.png","https://i.imgur.com/xSzIqrK.png"),
("[真棒]","https://i.imgur.com/xr1UOz1.png","https://i.imgur.com/w8YEw9Q.png"),
("[鄙视]","https://i.imgur.com/u6jlqVq.png","https://i.imgur.com/8JFNANq.png"),
("[疑问]","https://i.imgur.com/F29pmQ6.png","https://i.imgur.com/EbbTQAR.png"),
("[嘲笑]","https://i.imgur.com/BaWcsMR.png","https://i.imgur.com/0OGfJw4.png"),
("[滑稽]","https://i.imgur.com/lmbN0yI.png","https://i.imgur.com/Pc0wH85.png"),
("[笑眼]","https://i.imgur.com/ZveiiGy.png","https://i.imgur.com/PI1CfEr.png"),
("[狂汗]","https://i.imgur.com/veWihk6.png","https://i.imgur.com/3LtHdQv.png"),
("[大哭]","https://i.imgur.com/hu4oR6C.png","https://i.imgur.com/b4X9XLE.png"),
("[喷]","https://i.imgur.com/bkw3VRr.png","https://i.imgur.com/wnZL13L.png"),
("[苦笑]","https://i.imgur.com/VUWFktU.png","https://i.imgur.com/NAfspZ1.png"),
("[喝酒]","https://i.imgur.com/2ZZSapE.png","https://i.imgur.com/rVbSVak.png"),
("[吃瓜]","https://i.imgur.com/ee8Lq7H.png","https://i.imgur.com/0L26og9.png"),
("[捂脸]","https://i.imgur.com/krir4IG.png","https://i.imgur.com/qqBqgVm.png"),
("[呕]","https://i.imgur.com/6CUiUxv.png","https://i.imgur.com/kgdxRsG.png"),
("[阴险]","https://i.imgur.com/MA8YqTP.png","https://i.imgur.com/e94jbaT.png"),
("[怒]","https://i.imgur.com/n4kWfGB.png","https://i.imgur.com/iMXxNxh.png"),
("[衰]","https://i.imgur.com/voHFDyQ.png","https://i.imgur.com/XffE6gu.png"),
("[合十]","https://i.imgur.com/I8x3ang.png","https://i.imgur.com/T4rJVee.png"),
("[赞]","https://i.imgur.com/lG44yUl.png","https://i.imgur.com/AoF5PLp.png"),
("[踩]","https://i.imgur.com/cJp0uKZ.png","https://i.imgur.com/1XYGfXj.png"),
("[爱心]","https://i.imgur.com/sLENaF5.png","https://i.imgur.com/dND56oX.png"),
("[心碎]","https://i.imgur.com/AZxJzve.png","https://i.imgur.com/RiUsPci.png"),
};

    [Inject]
    private IJSRuntime JsRuntime { get; set; } = null!;
    [Inject]
    private IToastService Toast { get; set; } = null!;
    private ElementReference? containerRef;
    private DotNetObjectReference<ReplyInput>? thisRef;
    private IJSObjectReference? interopModule;
    private IJSObjectReference? quillRef;
    private bool isUploading, isReplying;

    protected override void OnInitialized()
    {
        this.thisRef = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            interopModule = await this.JsRuntime.InvokeAsync<IJSObjectReference>("import",
            "./_content/V2ex.Blazor.Shared/Components/ReplyInput.razor.js");
            quillRef = await interopModule.InvokeAsync<IJSObjectReference>("initialize", containerRef, thisRef);
        }
    }

    private Task OnEditorClick()
    {
        isEmojiShow = false;
        return Task.CompletedTask;
    }

    private Task ShowEmojiPanel()
    {
        isEmojiShow = true;
        return Task.CompletedTask;
    }

    private async Task ChooseEmoji(string emoji)
    {
        if (interopModule == null)
        {
            return;
        }
        await this.interopModule.InvokeVoidAsync("insertEmoji", quillRef, emoji);
    }

    private async Task ChooseClassic((string Name, string Low, string High) emoji)
    {
        if (interopModule == null)
        {
            return;
        }
        await this.interopModule.InvokeVoidAsync("insertClassicEmoji", quillRef, emoji.Low);
    }

    private async Task ChooseImage()
    {
        try
        {
            if (interopModule == null)
            {
                return;
            }
            isUploading = true;
            await this.interopModule.InvokeVoidAsync("chooseImage", quillRef, thisRef);
            await this.Toast.Show("图片上传成功");
        }
        catch (JSException e)
        {
            if(e.Message == "cancel")
            {
                //swallow it.
                return;
            }
            await this.Toast.Show($"图片上传失败: {e.Message}");
        }
        finally
        {
            isUploading = false;
        }

    }

    public async Task ReplyAsync()
    {
        try
        {
            isReplying = true;

            await this.InvokeAsync(this.StateHasChanged);

            await Task.Delay(1000);
            await this.ReplyCallback.InvokeAsync();
        }
        finally
        {
            isReplying = false;
        }
    }
}
