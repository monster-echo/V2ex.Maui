@using HtmlAgilityPack
<div class="markup-container text-gray-800 leading-relaxed tracking-wide" @ref="containerRef">
    @Content
</div>

<ImageViewer @ref="imageViewer" Images="Images"></ImageViewer>

@code {
    [Parameter]
    public MarkupString? Content { get; set; }

    [Parameter]
    public EventCallback<string> MemberClickedCallback { get; set; }

    [Parameter]
    public EventCallback<Uri> ExternalLinkClickedCallback { get; set; }

    [Inject]
    private IJSRuntime JsRuntime { get; set; } = null!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    private List<string> Images { get; set; } = [];

    private IJSObjectReference? interopModule;

    private ElementReference? containerRef;
    private DotNetObjectReference<MarkupStringView>? thisRef;
    private ImageViewer? imageViewer;

    protected override void OnInitialized()
    {
        thisRef = DotNetObjectReference.Create(this);
    }

    protected override Task OnParametersSetAsync()
    {
        if (Content != null)
        {
            Images = ParseImages(Content.Value.ToString());
        }

        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            interopModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import",
            "./_content/V2ex.Blazor.Shared/Components/MarkupStringView.razor.js");
            await interopModule.InvokeVoidAsync("initialize", containerRef, thisRef);
        }
    }

    public async Task RelaunchContentAsync()
    {
        if (interopModule != null)
        {
            await interopModule.InvokeVoidAsync("initialize", containerRef, thisRef);
        }
    }


    [JSInvokable]
    public async Task AnchorClickedJsInvoke(string href)
    {
        if (string.IsNullOrEmpty(href))
        {
            return;
        }

        var uri = new UriBuilder(href).Uri;
        if (uri.Host == AppConstants.BlazorHybridHost || IsV2exUri(uri))
        {
            var path = uri.AbsolutePath;
            if (path.StartsWith("/t/"))
            {
                var id = path.Substring(3);
                NavigationManager.NavigateTo($"/t/{id}");
            }
            else if (path.StartsWith("/member/"))
            {
                var username = path.Substring(8);
                await MemberClickedCallback.InvokeAsync(username);
            }
            else if (path.StartsWith("/go/"))
            {
                var name = path.Substring(4);
                NavigationManager.NavigateTo($"/go/{name}");
            }
            else if (path.StartsWith("/?"))
            {
                var query = uri.Query;
                if (query.StartsWith("?tab="))
                {
                    var tab = query.Substring(5);
                    NavigationManager.NavigateTo($"/?tab={tab}");
                }
            }
        }
        else
        {
            await ExternalLinkClickedCallback.InvokeAsync(uri);
        }
    }

    private bool IsV2exUri(Uri uri)
    {
        return uri.Host == "www.v2ex.com" || uri.Host == "v2ex.com";
    }

    [JSInvokable]
    public async Task ImageClickedJsInvoke(string src)
    {
        if (imageViewer == null)
        {
            return;
        }

        await imageViewer.Show(src);
    }

    private List<string> ParseImages(string html)
    {
        var images = new List<string>();
        var doc = new HtmlDocument();
        doc.LoadHtml(html);
        var nodes = doc.DocumentNode.SelectNodes("//img");
        if (nodes != null)
        {
            foreach (var node in nodes)
            {
                var src = node.GetAttributeValue("src", "");
                if (!string.IsNullOrEmpty(src))
                {
                    images.Add(src);
                }
            }
        }
        return images;
    }

}
