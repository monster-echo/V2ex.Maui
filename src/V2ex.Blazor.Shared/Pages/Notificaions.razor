@page "/notifications"
@attribute [Authorize]

<InfiniteList T="NotificationItemViewModel"
                LoadAsync="LoadAsync">
    <ItemContent>
        @{
            var item = context;
            <div class="flex flex-row space-x-2 p-2">
                <img class="w-10 h-10" src="@item.Avatar" alt="avatar" />

                <div class="flex flex-col space-y-2 p-2 pt-0 w-full">
                    <div class="text-small text-gray-400">
                        <span class="text-gray-900 cursor-pointer"
                              @onclick="()=>GoToUser(item.UserName)">@item.UserName</span>
                        <span>@item.PreTitle</span>
                        <span>@item.TopicTitle</span>
                        <span>@item.PostTitle</span>
                        <span>@item.Created</span>
                    </div>

                    @if (item.Payload != null)
                    {
                        <div class="bg-gray-100 p-2 rounded-sm">
                            @item.Payload
                        </div>
                    }
                </div>
            </div>
        }
    </ItemContent>
</InfiniteList>

@code {

    [Inject] private ApiService ApiService { get; set; } = default!;
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    private string GetTopicId(string link)
    {
        return link.Split('/').Last();
    }

    private async Task<(int, int, IReadOnlyList<NotificationItemViewModel>)> LoadAsync(int page)
    {
        var info = await ApiService.GetNotifications(page);

        if (info == null)
        {
            //todo: how to handle this situation?
            throw new ArgumentNullException();
        }

        var currentPage = info.CurrentPage;
        var maximumPage = info.MaximumPage;
        var items = info.Items.Select(o => new NotificationItemViewModel(
            o.UserName,
            o.UserLink,
            o.Avatar,
            o.TopicLink,
            o.TopicTitle,
            o.PreTitle,
            o.PostTitle,
            o.Created,
            o.Payload == null ? null : new MarkupString(o.Payload),
            GetTopicId(o.TopicLink))).ToList();

        return (currentPage, maximumPage, items);
    }

    private Task GoToUser(string userName)
    {
        NavigationManager.NavigateTo($"/member/{userName}");
        return Task.CompletedTask;
    }
}