@page "/settings"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

<HeadTitle Title="选项"></HeadTitle>

<div class="flex flex-col h-full w-full max-w-md mx-auto">
    <div class="flex flex-col flex-1 w-full overflow-y-auto">
        <div class="w-full flex space-x-4 active:bg-gray-100 px-4 py-2 font-medium" @onclick="GoToGithubAsync">
            <svg class="w-6 h-6 text-gray-800 dark:text-white"
                    aria-hidden="true"
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    fill="currentColor"
                    viewBox="0 0 24 24">
                <path fill-rule="evenodd" d="M12.006 2a9.847 9.847 0 0 0-6.484 2.44 10.32 10.32 0 0 0-3.393 6.17 10.48 10.48 0 0 0 1.317 6.955 10.045 10.045 0 0 0 5.4 4.418c.504.095.683-.223.683-.494 0-.245-.01-1.052-.014-1.908-2.78.62-3.366-1.21-3.366-1.21a2.711 2.711 0 0 0-1.11-1.5c-.907-.637.07-.621.07-.621.317.044.62.163.885.346.266.183.487.426.647.71.135.253.318.476.538.655a2.079 2.079 0 0 0 2.37.196c.045-.52.27-1.006.635-1.37-2.219-.259-4.554-1.138-4.554-5.07a4.022 4.022 0 0 1 1.031-2.75 3.77 3.77 0 0 1 .096-2.713s.839-.275 2.749 1.05a9.26 9.26 0 0 1 5.004 0c1.906-1.325 2.74-1.05 2.74-1.05.37.858.406 1.828.101 2.713a4.017 4.017 0 0 1 1.029 2.75c0 3.939-2.339 4.805-4.564 5.058a2.471 2.471 0 0 1 .679 1.897c0 1.372-.012 2.477-.012 2.814 0 .272.18.592.687.492a10.05 10.05 0 0 0 5.388-4.421 10.473 10.473 0 0 0 1.313-6.948 10.32 10.32 0 0 0-3.39-6.165A9.847 9.847 0 0 0 12.007 2Z" clip-rule="evenodd" />
            </svg>
            <span>
                问题反馈
            </span>
        </div>

        @if (OperatingSystem.IsWindows() || OperatingSystem.IsMacOS())
        {
            <div class="w-full flex space-x-4 active:bg-gray-100 px-4 py-2 font-medium" 
                @onclick="GoToNetworkProxyAsync">
                <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 20V10m0 10-3-3m3 3 3-3m5-13v10m0-10 3 3m-3-3-3 3" />
                </svg>
                <span>
                    代理网络
                </span>
            </div>
        }
    </div>

   

    @if (currentUser != null && currentUser.IsAuthenticated)
    {
        <div class="w-full p-4">
            <button class="w-full text-gray-800  bg-gray-100 py-2 rounded-md font-medium"
                @onclick="LogOutAsync">退出登录</button>
        </div>
    }
    else
    {
        <div class="w-full p-4">
            <button class="w-full text-gray-800  bg-gray-100 py-2 rounded-md font-medium"
                    @onclick="LoginAsync">
                登录
            </button>
        </div>
    }
</div>

@code {
    [Inject]
    private IBrowser Browser { get; set; } = null!;
    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider
    {
        get;
        set;
    } = null!;

    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    private CurrentUser? currentUser;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    private IAlterService AlterService { get; set; } = null!;


    protected override async Task OnParametersSetAsync()
    {
        if (AuthenticationStateTask != null)
        {
            currentUser = new CurrentUser((await AuthenticationStateTask).User);
        }
    }

    private async Task LogOutAsync()
    {
        if (!await AlterService.Confirm("退出登录", "确认退出吗？"))
        {
            return;
        }

        await ((IAuthenticationStateProvider)this.AuthenticationStateProvider).LogoutAsync();
        this.NavigationManager.NavigateTo("/");
    }

    private Task LoginAsync()
    {
        return Task.CompletedTask;
    }

    private Task GoToGithubAsync()
    {
        return Browser.OpenAsync(new Uri(AppConstants.GithubRepository));
    }

    private Task GoToNetworkProxyAsync()
    {
        this.NavigationManager.NavigateTo("/settings-network-proxy");
        return Task.CompletedTask;
    }
}