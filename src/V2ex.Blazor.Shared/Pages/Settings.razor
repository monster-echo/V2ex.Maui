@page "/settings"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

<HeadTitle Title="设置"></HeadTitle>

<div class="flex flex-col h-full w-full max-w-md mx-auto items-center text-center w-full space-y-4 p-4">

    @if (currentUser != null && currentUser.IsAuthenticated)
    {
        <button class="w-full bg-red-600  text-gray-100 rounded-md py-4 font-medium" @onclick="LogOutAsync">退出登录</button>
    }
</div>

@code {

    [Inject]
    private Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider
    {
        get;
        set;
    } = null!;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;
    private CurrentUser? currentUser;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    private IAlterService AlterService { get; set; } = null!;

    private bool isLogging;

    protected override async Task OnParametersSetAsync()
    {
        currentUser = new CurrentUser((await AuthenticationStateTask).User);
    }

    private async Task LogOutAsync()
    {
        if (!await AlterService.Confirm("退出登录", "确认退出吗？"))
        {
            return;
        }

        try
        {
            isLogging = true;
            await ((V2exAuthenticationStateProvider)this.AuthenticationStateProvider).LogoutAsync();
            // this.NavigationManager.NavigateTo("/");
        }
        finally
        {
            isLogging = false;
        }
    }

    private async Task TestAsync()
    {
        try
        {
            isLogging = true;
            await ((V2exAuthenticationStateProvider)this.AuthenticationStateProvider).LoginAsync(new UserInfo
                {
                    Name = "rwecho",
                    Avatar = "https://cdn.v2ex.com/avatar/3e3c/9b9c/2353_normal.png?m=1628076543",
                });
        }
        finally
        {
            isLogging = false;
        }
        
    }
}