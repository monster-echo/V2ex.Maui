@page "/settings"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

<HeadTitle Title="设置"></HeadTitle>

<div class="flex flex-col h-full w-full max-w-md mx-auto items-center text-center w-full space-y-4 p-4 divide-y">

    <div class="w-full pt-4 text-end underline underline-offset-2">
        <a class="text-start w-full" href="https://github.com/rwecho/V2ex.Maui">打开 github 仓库</a>
    </div>

    @if (currentUser != null && currentUser.IsAuthenticated)
    {
        <div class="w-full pt-2">
            <button class="w-full text-gray-800  bg-gray-100 py-2 rounded-md font-medium" @onclick="LogOutAsync">退出登录</button>
        </div>
    }
</div>

@code {

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider
    {
        get;
        set;
    } = null!;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;
    private CurrentUser? currentUser;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    private IAlterService AlterService { get; set; } = null!;

    private bool isLogging;

    protected override async Task OnParametersSetAsync()
    {
        currentUser = new CurrentUser((await AuthenticationStateTask).User);
    }

    private async Task LogOutAsync()
    {
        if (!await AlterService.Confirm("退出登录", "确认退出吗？"))
        {
            return;
        }

        try
        {
            isLogging = true;
            await ((IAuthenticationStateProvider)this.AuthenticationStateProvider).LogoutAsync();
            // this.NavigationManager.NavigateTo("/");
        }
        finally
        {
            isLogging = false;
        }
    }
}