@page "/"
@page "/tab"
@layout MainLayout
@using System.Diagnostics
@using Microsoft.AspNetCore.Components.Sections
@implements IAsyncDisposable

<HeadTitle Title="@Tab"></HeadTitle>
<SectionContent SectionName="NavHeader">
    <ul class="hidden flex flex-1 flex-wrap -mb-px text-sm font-medium text-center md:flex" role="tablist">
        @foreach (var tab in tabs)
        {
            var id = $"{tab.Name}-tab";
            var activeCss = (currentTab?.Name == tab.Name)
                ? "inline-block px-4 py-2 border-b-2 rounded-t-lg border-blue-500"
                : "inline-block px-4 py-2 rounded-t-lg";
            <li class="me-2" role="presentation" @key="tab.Name">
                <button class="@activeCss" id="@id" type="button" role="tab" @onclick="()=>TabClick(tab.Name)">
                    @tab.Description
                </button>
            </li>
        }
    </ul>

    @if (currentTab != null)
    {
        <div class="flex flex-1 ms-4 md:hidden">
            <button id="dropdownDefaultButton" @ref="dropdownButton" data-dropdown-toggle="dropdown"
                class="text-gray-900 bg-gray-200 font-medium rounded-lg text-sm px-4 py-2 text-center inline-flex items-center"
                type="button">
                @currentTab.Description <svg class="w-2.5 h-2.5 ms-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                    fill="none" viewBox="0 0 10 6">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="m1 1 4 4 4-4" />
                </svg>
            </button>

            <!-- Dropdown menu -->
            <div id="dropdown"
                class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow w-44 dark:bg-gray-700">
                <ul class="py-2 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownDefaultButton"
                    role="tablist">
                    @foreach (var tab in tabs)
                    {
                        var id = $"{tab.Name}-tab";
                        var activeCss = (currentTab?.Name == tab.Name)
                        ? "block px-4 py-2 border-b-2 w-full border-blue-500"
                        : "block px-4 py-2 w-full";
                        <li>
                            <button class="@activeCss" id="@id" type="button"
                                role="tab" @onclick="()=>TabClick(tab.Name)">
                                @tab.Description
                            </button>
                        </li>
                    }
                </ul>
            </div>
        </div>
    }
</SectionContent>
<!-- Slider main container -->
<div class="swiper" style="height:100%">
    <!-- Additional required wrapper -->
    <div class="swiper-wrapper">
        @foreach (var tab in tabs)
        {
            <Home_TabPanel Tab="@tab.Name" @ref="TabPanel"></Home_TabPanel>
        }
    </div>
</div>

@code
{
    [Parameter]
    [SupplyParameterFromQuery(Name = "tab")]
    public string? Tab { get; set; }

    [Inject]
    private ApiService ApiService { get; set; } = null!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    private IJSRuntime JsRuntime { get; set; } = null!;

    [Inject]
    private IPreferences Preferences { get; set; } = null!;

    private IReadOnlyList<TabDefinition> tabs = null!;
    private List<Home_TabPanel> tabPanels = new();

    private TabDefinition? currentTab;
    private ElementReference? dropdownButton;
    private IJSObjectReference? interOpModule, swiperJsRef;
    private DotNetObjectReference<Home>? thisRef;

    private Home_TabPanel TabPanel
    {
        set
        {
            tabPanels.Add(value);
        }
    }

    private const string DefaultTab = nameof(DefaultTab);

    protected override void OnInitialized()
    {
        thisRef = DotNetObjectReference.Create(this);
        tabs = TabDefinition.GetTabDefinitions().ToArray();

        var defaultTab = Tab ?? Preferences.Get<string?>(DefaultTab, null);
        currentTab = tabs.FirstOrDefault(x => x.Name == defaultTab) ?? tabs[0];
    }

    private void TabClick(string tabName)
    {
        currentTab = tabs.FirstOrDefault(x => x.Name == tabName) ?? tabs[0];
        this.ShouldRender();

        var index = Array.IndexOf(tabs.ToArray(), currentTab);

        this.swiperJsRef?.InvokeVoidAsync("slideTo", index);

        // trigger the button dropdownDefaultButton click
        this.JsRuntime.InvokeVoidAsync("utils.triggerClick", dropdownButton);

        Preferences.Set(DefaultTab, tabName);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            interOpModule = await this.JsRuntime.InvokeAsync<IJSObjectReference>("import",
                "./_content/V2ex.Blazor.Shared/Pages/Home.razor.js");

            var initialSlide = Array.IndexOf(tabs.ToArray(), currentTab);
            swiperJsRef = await interOpModule.InvokeAsync<IJSObjectReference>("initialize", thisRef, initialSlide);
        }
    }

    [JSInvokable]
    public async Task OnSlideChangeAsync(int activeIndex)
    {
        currentTab = tabs[activeIndex];
        await this.InvokeAsync(this.StateHasChanged);
        await tabPanels[activeIndex].OnShowAsync();
        Preferences.Set(DefaultTab, currentTab.Name);
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (swiperJsRef != null)
                await swiperJsRef.InvokeVoidAsync("destroy");

            if (interOpModule != null)
                await interOpModule.DisposeAsync();
        }
        catch (JSException)
        {
            // todo: handle the exception.
        }
    }
}