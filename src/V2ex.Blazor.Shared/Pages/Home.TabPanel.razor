<div class="h-full rounded-lg bg-gray-50 dark:bg-gray-800 swiper-slide" id="@Tab" role="tabpanel"
    aria-labelledby="@(Tab+"-tab")">
    <LoadingBox Load="LoadAsync" @ref="loadingBoxRef" IsManual="true">
            @if (viewModel != null)
            {
                <RefreshView Refresh="OnRefresh">
                    <ScrollView>
                        <div class="grid grid-cols-1 divide-y">
                            @foreach (var topic in viewModel.Topics)
                            {
                                <Topic ViewModel="@topic"></Topic>
                            }
                        </div>
                        <div class="flex flex-col items-center text-gray-400 text-sm mt-4 pb-10">
                            <div>全部加载完成</div>
                        </div>
                    </ScrollView>
                </RefreshView>
            }
            else
            {
                <div class="grid grid-cols-1 divide-y">
                    @for (int i = 0; i < 15; i++)
                    {
                        <TopicSkeleton />
                    }
                </div>
            }
    </LoadingBox>
</div>

@code {
    [Parameter]
    public string Tab { get; set; } = null!;
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;
    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    [Inject]
    private ApiService ApiService { get; set; } = null!;

    [Inject]
    private IJSRuntime JsRuntime { get; set; } = null!;
    [Inject]
    private IToastService Toast { get; set; } = null!;


    private LoadingBox? loadingBoxRef;

    private TabViewModel? viewModel;


    private async Task LoadAsync()
    {
        var tabTopics = await this.ApiService.GetTabTopics(this.Tab);

        if (tabTopics == null)
        {
            return;
        }
        viewModel = new TabViewModel(tabTopics);
        if (tabTopics.CurrentUser?.Name == null)
        {
            var currentUser = new CurrentUser((await AuthenticationStateTask).User);
            if (currentUser.IsAuthenticated)
            {
                // logout current user when can not parse current user in tab page.
                await ((IAuthenticationStateProvider)this.AuthenticationStateProvider).LogoutAsync();
            }
        }
    }

    private async Task OnRefresh()
    {
        await LoadAsync();

        await Toast.Show("刷新成功");
    }

    [JSInvokable]
    public async Task OnShowAsync()
    {
        if (viewModel != null || this.loadingBoxRef == null)
        {
            return;
        }

        await this.loadingBoxRef.InvokeAsync();
    }
}
