@page "/t/{Id:int}"
@using System.Text
@using HtmlAgilityPack
@implements IDisposable
<HeadTitle Title="话题"></HeadTitle>

<div @ref="containerRef" class="h-full">
    @if (viewModel != null)
    {
        <RefreshView Refresh="OnRefreshAsync">
            <CollectionView @ref="collectionView" TItem="ReplyViewModel"
                            Items="viewModel.Replies"
                            RemainingReachedCallback="OnRemainingReached"
                            OnScrollCallback="OnScroll">
                <Header>
                    <div class="grid grid-cols-1 divide-y ">
                        <div class="flex flex-col">
                            <div class="flex flex-row justify-center select-none px-4 py-2 ">
                                <a href="@viewModel.UserLink" class="flex flex-row items-center">
                                    <img class="w-10 h-10 rounded-full shadow-md" src="@viewModel.Avatar" alt="avatar">
                                </a>
                                <div class="flex flex-col flex-1 mx-2 justify-center">
                                    <div class="flex flex-row">
                                        <a href="@viewModel.UserLink">
                                            <span class="text-sm text-gray-900">@viewModel.UserName</span>
                                        </a>
                                    </div>

                                    <div class="flex flex-row">
                                        <span class="text-sm text-gray-500 ">评论 @viewModel.CreatedText</span>
                                    </div>
                                </div>
                                <div class="flex items-center ">
                                    <a href="@viewModel.NodeLink">
                                        <span class="text-sm text-gray-50 bg-gray-400 rounded-full px-2 py-1">@viewModel.NodeName</span>
                                    </a>
                                </div>
                            </div>

                            <div class="flex flex-row select-auto px-4 py-2">
                                <span class="text-lg font-semibold text-gray-800">@viewModel.Title</span>
                            </div>
                        </div>

                        <div class="flex flex-col divide-y">
                            @if (formattedContent == null)
                            {
                                 <div class="flex flex-col select-auto px-4 py-2 text-start">
                                    <MarkupStringView Content="viewModel.Content"
                                                      ExternalLinkClickedCallback="OnExternalLickClicked"></MarkupStringView>
                                </div>
                            }
                            else
                            {
                                <div id="accordion-collapse" data-accordion="open">
                                    <h2 id="accordion-collapse-heading-1">
                                        <button type="button" class="flex items-center justify-between w-full px-4 py-2 text-gray-500 border border-b-0 border-gray-200gap-3" data-accordion-target="#accordion-collapse-body-1" aria-expanded="false" aria-controls="accordion-collapse-body-1">
                                            <span>原文</span>
                                            <svg data-accordion-icon class="w-3 h-3 rotate-180 shrink-0" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5" />
                                            </svg>
                                        </button>
                                    </h2>
                                    <div id="accordion-collapse-body-1" class="hidden" aria-labelledby="accordion-collapse-heading-1">
                                        <div class="flex flex-col select-auto px-4 py-2 text-start">
                                            <MarkupStringView Content="viewModel.Content"
                                                              ExternalLinkClickedCallback="OnExternalLickClicked"></MarkupStringView>
                                        </div>
                                    </div>
                                    <h2 id="accordion-collapse-heading-2">
                                        <button type="button" class="flex items-center justify-between w-full px-4 py-2 text-gray-500 border border-b-0 border-gray-200  gap-3" data-accordion-target="#accordion-collapse-body-2" aria-expanded="true" aria-controls="accordion-collapse-body-2">
                                            <span>AI 优化</span>
                                            <svg data-accordion-icon class="w-3 h-3 rotate-180 shrink-0" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5" />
                                            </svg>
                                        </button>
                                    </h2>
                                    <div id="accordion-collapse-body-2" class="hidden" aria-labelledby="accordion-collapse-heading-2">
                                        <div class="flex flex-col select-auto px-4 py-2 text-start">
                                            <MarkupStringView @ref="formattedMarkupStringViewRef" Content="formattedContent"
                                                              ExternalLinkClickedCallback="OnExternalLickClicked"></MarkupStringView>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                    @if (viewModel.Supplements.Any())
                    {
                        <div class="flex flex-col divide-y divide-x-2">
                            <div></div>
                            @for (int i = 0; i < viewModel.Supplements.Count; i++)
                            {
                                var supplement = viewModel.Supplements[i];
                                <div class="flex flex-col select-auto px-4 py-2 space-y-1 bg-yellow-50">
                                    <span class="text-sm text-gray-400">第 @(i + 1) 条附言 @supplement.CreatedText</span>
                                    <MarkupStringView Content="supplement.Content"></MarkupStringView>
                                </div>
                            }
                        </div>
                    }

                    <div class="flex flex-row items-center justify-items-center p-4  bg-gray-100 text-gray-400 text-sm">
                        <div class="flex space-x-2">
                            <div>@viewModel.RepliesCount 条回复</div>
                            <div class="hidden md:flex">@viewModel.LastReplyTime?.ToString("yyyy-MM-dd HH:mm:ss")</div>
                            <div class="md:hidden">@viewModel.LastReplyTime?.ToString("yyyy-MM-dd")</div>
                        </div>

                        <div class="flex-1"></div>
                        <div class="hidden md:flex">
                            @if (viewModel.Tags.Any())
                            {
                                <div class="flex flex-row select-auto space-x-2">
                                    @foreach (var tag in viewModel.Tags)
                                    {
                                        <span class="text-gray-50 bg-gray-400 rounded-full px-2 py-1">@tag</span>
                                    }
                                </div>
                            }
                        </div>

                        @if (IsFormatTopicShow)
                        {
                            <div class="ms-2 flex flex-row ">
                                @if(isFormatting){
                                    <button class="px-2 py-1 rounded-full text-sm flex space-x-2" >
                                        <div role="status">
                                            <svg aria-hidden="true"
                                                 class="w-4 h-4 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600"
                                                 viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                                                      fill="currentColor" />
                                                <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                                                      fill="currentFill" />
                                            </svg>
                                            <span class="sr-only">Loading...</span>
                                        </div>
                                    </button>
                                }
                                else
                                {
                                    <button class="px-2 py-1 rounded-full text-sm flex space-x-2" @onclick="FormatTopicAsync">
                                        <svg class="w-4 h-4 text-gray-600 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 21">
                                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m12.555 5.117 2.828 2.828M14 16v4m-2-2h4M3 6v4M1 8h4m11.01-6.339 2.828 2.829L3.99 19.339 1.161 16.51 16.01 1.661Z" />
                                            <path fill="currentColor" d="M16 13h-2v2h2v-2ZM10 2H8v2h2V2ZM7 4H5v2h2V4ZM4 2H2v2h2V2Zm15 8h-2v2h2v-2Zm0 5h-2v2h2v-2Z" />
                                        </svg>
                                        <span class="hidden md:flex">
                                            AI
                                        </span>
                                    </button>
                                }
                            </div>
                        }
                    </div>
                </Header>
                <ItemContent Context="item">
                    @{
                        var isOp = item.UserName == viewModel.UserName;
                        <CascadingValue Value="viewModel">
                            <Reply @key="item.NormalizedId" ViewModel="@item" IsOp="isOp"
                                CallUpCallback="OnCallUpAsync"
                                MentionCallback="OnMentionedAsync" />
                        </CascadingValue>
                    }
                </ItemContent>
                <Footer>
                    @if (viewModel.CurrentPage == viewModel.MaximumPage)
                    {
                        <div class="flex flex-col items-center text-gray-400 text-sm mt-4 pb-10 flex-grow">
                            <div>全部加载完成</div>
                        </div>
                    }
                    else
                    {
                        <div class="flex flex-row flex-grow place-content-center items-center text-gray-400 text-sm mt-4 pb-10 space-x-2">
                            <div role="status">
                                <svg aria-hidden="true"
                                     class="w-8 h-8 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600"
                                     viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                                          fill="currentColor" />
                                    <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                                          fill="currentFill" />
                                </svg>
                                <span class="sr-only">Loading...</span>
                            </div>
                            <div>加载中...</div>
                        </div>
                    }

                    @if (currentUser != null && currentUser.IsAuthenticated)
                    {
                        <div class="sticky bottom-0 w-full flex flex-row p-4 bg-gray-50  shadow-md border-t-[1px]">
                            <div class="flex flex-row me-2 md:me-4 w-full">
                                <div @onclick="()=>ShowReplyInput()" class="p-2 w-full z-20 text-sm text-gray-600 bg-gray-100 rounded-lg border border-gray-300">写回复...</div>
                            </div>

                            <div class="flex flex-row md:space-x-4 ">

                                @if (!farFromTop)
                                {
                                    if (isIgnoring)
                                    {
                                        <button disabled type="button"
                                        class="p-2 text-sm font-medium text-white bg-gray-50 rounded-lg">
                                            <svg aria-hidden="true" role="status" class="animate-spin" height="16" width="16"
                                            viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                                                fill="currentColor" />
                                                <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                                                fill="#1C64F2" />
                                            </svg>
                                        </button>
                                    }
                                    else
                                    {
                                        if (viewModel.Ignored)
                                        {
                                            <button class="text-sm text-gray-400 p-2 flex flex-row space-x-2 items-center font-medium bg-gray-50 rounded-lg"
                                            @onclick="UnIgnoreTopic">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="fill-red-400" height="16" width="20" viewBox="0 0 640 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.--><path d="M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L525.6 386.7c39.6-40.6 66.4-86.1 79.9-118.4c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C465.5 68.8 400.8 32 320 32c-68.2 0-125 26.3-169.3 60.8L38.8 5.1zm151 118.3C226 97.7 269.5 80 320 80c65.2 0 118.8 29.6 159.9 67.7C518.4 183.5 545 226 558.6 256c-12.6 28-36.6 66.8-70.9 100.9l-53.8-42.2c9.1-17.6 14.2-37.5 14.2-58.7c0-70.7-57.3-128-128-128c-32.2 0-61.7 11.9-84.2 31.5l-46.1-36.1zM394.9 284.2l-81.5-63.9c4.2-8.5 6.6-18.2 6.6-28.3c0-5.5-.7-10.9-2-16c.7 0 1.3 0 2 0c44.2 0 80 35.8 80 80c0 9.9-1.8 19.4-5.1 28.2zm51.3 163.3l-41.9-33C378.8 425.4 350.7 432 320 432c-65.2 0-118.8-29.6-159.9-67.7C121.6 328.5 95 286 81.4 256c8.3-18.4 21.5-41.5 39.4-64.8L83.1 161.5C60.3 191.2 44 220.8 34.5 243.7c-3.3 7.9-3.3 16.7 0 24.6c14.9 35.7 46.2 87.7 93 131.1C174.5 443.2 239.2 480 320 480c47.8 0 89.9-12.9 126.2-32.5zm-88-69.3L302 334c-23.5-5.4-43.1-21.2-53.7-42.3l-56.1-44.2c-.2 2.8-.3 5.6-.3 8.5c0 70.7 57.3 128 128 128c13.3 0 26.1-2 38.2-5.8z" /></svg>
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="text-sm text-gray-400 p-2 flex flex-row space-x-2 items-center font-medium bg-gray-50 rounded-lg"
                                            @onclick="IgnoreTopic">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="fill-gray-400" height="16" width="20" viewBox="0 0 640 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.--><path d="M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L525.6 386.7c39.6-40.6 66.4-86.1 79.9-118.4c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C465.5 68.8 400.8 32 320 32c-68.2 0-125 26.3-169.3 60.8L38.8 5.1zm151 118.3C226 97.7 269.5 80 320 80c65.2 0 118.8 29.6 159.9 67.7C518.4 183.5 545 226 558.6 256c-12.6 28-36.6 66.8-70.9 100.9l-53.8-42.2c9.1-17.6 14.2-37.5 14.2-58.7c0-70.7-57.3-128-128-128c-32.2 0-61.7 11.9-84.2 31.5l-46.1-36.1zM394.9 284.2l-81.5-63.9c4.2-8.5 6.6-18.2 6.6-28.3c0-5.5-.7-10.9-2-16c.7 0 1.3 0 2 0c44.2 0 80 35.8 80 80c0 9.9-1.8 19.4-5.1 28.2zm51.3 163.3l-41.9-33C378.8 425.4 350.7 432 320 432c-65.2 0-118.8-29.6-159.9-67.7C121.6 328.5 95 286 81.4 256c8.3-18.4 21.5-41.5 39.4-64.8L83.1 161.5C60.3 191.2 44 220.8 34.5 243.7c-3.3 7.9-3.3 16.7 0 24.6c14.9 35.7 46.2 87.7 93 131.1C174.5 443.2 239.2 480 320 480c47.8 0 89.9-12.9 126.2-32.5zm-88-69.3L302 334c-23.5-5.4-43.1-21.2-53.7-42.3l-56.1-44.2c-.2 2.8-.3 5.6-.3 8.5c0 70.7 57.3 128 128 128c13.3 0 26.1-2 38.2-5.8z" /></svg>
                                            </button>
                                        }
                                    }
                                }

                                @if (isFavoriting)
                                {
                                    <button disabled type="button"
                                    class="p-2 text-sm font-medium text-white bg-gray-50 rounded-lg">
                                        <svg aria-hidden="true" role="status" class="animate-spin" height="16" width="16"
                                        viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                                            fill="currentColor" />
                                            <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                                            fill="#1C64F2" />
                                        </svg>
                                    </button>
                                }
                                else
                                {
                                    if (viewModel.Liked)
                                    {
                                        <button class="text-sm text-gray-400 p-2 flex flex-row space-x-2 items-center font-medium bg-gray-50 rounded-lg"
                                        @onclick="UnfavoriteTopic">
                                            <span>@viewModel.Likes</span>
                                            <svg xmlns="http://www.w3.org/2000/svg" class="fill-red-400" height="16" width="12" viewBox="0 0 384 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.--><path d="M0 48C0 21.5 21.5 0 48 0l0 48V441.4l130.1-92.9c8.3-6 19.6-6 27.9 0L336 441.4V48H48V0H336c26.5 0 48 21.5 48 48V488c0 9-5 17.2-13 21.3s-17.6 3.4-24.9-1.8L192 397.5 37.9 507.5c-7.3 5.2-16.9 5.9-24.9 1.8S0 497 0 488V48z" /></svg>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="text-sm text-gray-400 p-2 flex flex-row space-x-2 items-center font-medium bg-gray-50 rounded-lg"
                                        @onclick="FavoriteTopic">
                                            <span>@viewModel.Likes</span>
                                            <svg xmlns="http://www.w3.org/2000/svg" class="fill-gray-400" height="16" width="12" viewBox="0 0 384 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.--><path d="M0 48C0 21.5 21.5 0 48 0l0 48V441.4l130.1-92.9c8.3-6 19.6-6 27.9 0L336 441.4V48H48V0H336c26.5 0 48 21.5 48 48V488c0 9-5 17.2-13 21.3s-17.6 3.4-24.9-1.8L192 397.5 37.9 507.5c-7.3 5.2-16.9 5.9-24.9 1.8S0 497 0 488V48z" /></svg>
                                        </button>
                                    }
                                }

                                @if (isThanking)
                                {
                                    <button disabled type="button"
                                        class="p-2 text-sm font-medium text-white bg-gray-50 rounded-lg">
                                        <svg aria-hidden="true" role="status" class="animate-spin" height="16" width="16"
                                        viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                                            fill="currentColor" />
                                            <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                                            fill="#1C64F2" />
                                        </svg>
                                    </button>
                                }
                                else
                                {
                                    if (viewModel.Thanked)
                                    {
                                        <button class="text-sm text-gray-400 p-2 flex flex-row space-x-2 items-center font-medium bg-gray-50 rounded-lg">
                                            <span>@viewModel.Thanks</span>
                                            <svg xmlns="http://www.w3.org/2000/svg" class="fill-red-400" height="16" width="16" viewBox="0 0 512 512">
                                                <!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.-->
                                                <path d="M323.8 34.8c-38.2-10.9-78.1 11.2-89 49.4l-5.7 20c-3.7 13-10.4 25-19.5 35l-51.3 56.4c-8.9 9.8-8.2 25 1.6 33.9s25 8.2 33.9-1.6l51.3-56.4c14.1-15.5 24.4-34 30.1-54.1l5.7-20c3.6-12.7 16.9-20.1 29.7-16.5s20.1 16.9 16.5 29.7l-5.7 20c-5.7 19.9-14.7 38.7-26.6 55.5c-5.2 7.3-5.8 16.9-1.7 24.9s12.3 13 21.3 13L448 224c8.8 0 16 7.2 16 16c0 6.8-4.3 12.7-10.4 15c-7.4 2.8-13 9-14.9 16.7s.1 15.8 5.3 21.7c2.5 2.8 4 6.5 4 10.6c0 7.8-5.6 14.3-13 15.7c-8.2 1.6-15.1 7.3-18 15.2s-1.6 16.7 3.6 23.3c2.1 2.7 3.4 6.1 3.4 9.9c0 6.7-4.2 12.6-10.2 14.9c-11.5 4.5-17.7 16.9-14.4 28.8c.4 1.3 .6 2.8 .6 4.3c0 8.8-7.2 16-16 16H286.5c-12.6 0-25-3.7-35.5-10.7l-61.7-41.1c-11-7.4-25.9-4.4-33.3 6.7s-4.4 25.9 6.7 33.3l61.7 41.1c18.4 12.3 40 18.8 62.1 18.8H384c34.7 0 62.9-27.6 64-62c14.6-11.7 24-29.7 24-50c0-4.5-.5-8.8-1.3-13c15.4-11.7 25.3-30.2 25.3-51c0-6.5-1-12.8-2.8-18.7C504.8 273.7 512 257.7 512 240c0-35.3-28.6-64-64-64l-92.3 0c4.7-10.4 8.7-21.2 11.8-32.2l5.7-20c10.9-38.2-11.2-78.1-49.4-89zM32 192c-17.7 0-32 14.3-32 32V448c0 17.7 14.3 32 32 32H96c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32H32z" />
                                            </svg>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="text-sm text-gray-400 p-2 flex flex-row space-x-2 items-center font-medium bg-gray-50 rounded-lg"
                                        @onclick="ThankTopic">
                                            <span>@viewModel.Thanks</span>
                                            <svg xmlns="http://www.w3.org/2000/svg" class="fill-gray-400" height="16" width="16" viewBox="0 0 512 512">
                                                <!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.-->
                                                <path d="M323.8 34.8c-38.2-10.9-78.1 11.2-89 49.4l-5.7 20c-3.7 13-10.4 25-19.5 35l-51.3 56.4c-8.9 9.8-8.2 25 1.6 33.9s25 8.2 33.9-1.6l51.3-56.4c14.1-15.5 24.4-34 30.1-54.1l5.7-20c3.6-12.7 16.9-20.1 29.7-16.5s20.1 16.9 16.5 29.7l-5.7 20c-5.7 19.9-14.7 38.7-26.6 55.5c-5.2 7.3-5.8 16.9-1.7 24.9s12.3 13 21.3 13L448 224c8.8 0 16 7.2 16 16c0 6.8-4.3 12.7-10.4 15c-7.4 2.8-13 9-14.9 16.7s.1 15.8 5.3 21.7c2.5 2.8 4 6.5 4 10.6c0 7.8-5.6 14.3-13 15.7c-8.2 1.6-15.1 7.3-18 15.2s-1.6 16.7 3.6 23.3c2.1 2.7 3.4 6.1 3.4 9.9c0 6.7-4.2 12.6-10.2 14.9c-11.5 4.5-17.7 16.9-14.4 28.8c.4 1.3 .6 2.8 .6 4.3c0 8.8-7.2 16-16 16H286.5c-12.6 0-25-3.7-35.5-10.7l-61.7-41.1c-11-7.4-25.9-4.4-33.3 6.7s-4.4 25.9 6.7 33.3l61.7 41.1c18.4 12.3 40 18.8 62.1 18.8H384c34.7 0 62.9-27.6 64-62c14.6-11.7 24-29.7 24-50c0-4.5-.5-8.8-1.3-13c15.4-11.7 25.3-30.2 25.3-51c0-6.5-1-12.8-2.8-18.7C504.8 273.7 512 257.7 512 240c0-35.3-28.6-64-64-64l-92.3 0c4.7-10.4 8.7-21.2 11.8-32.2l5.7-20c10.9-38.2-11.2-78.1-49.4-89zM32 192c-17.7 0-32 14.3-32 32V448c0 17.7 14.3 32 32 32H96c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32H32z" />
                                            </svg>
                                        </button>
                                    }
                                }

                                @if (farFromTop)
                                {
                                    <button class="text-sm text-gray-400 p-2 flex flex-row space-x-2 items-center font-medium bg-gray-50 rounded-lg"
                                    @onclick="ScrollToTop">
                                        <svg class="w-3 h-3 text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 14">
                                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13V1m0 0L1 5m4-4 4 4" />
                                        </svg>
                                    </button>
                                }
                            </div>
                        </div>
                    }
                </Footer>

            </CollectionView>
        </RefreshView>
    }
    else
    {
        <div class="animate-pulse">
            <div class="grid grid-cols-1 divide-y ">
                <div class="flex flex-col">
                    <div class="flex flex-row justify-center select-none px-4 py-2 ">
                        <a href="#" class="flex flex-row items-center">
                            <svg class="w-10 h-10 text-gray-200 dark:text-gray-700" aria-hidden="true"
                                 xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M10 0a10 10 0 1 0 10 10A10.011 10.011 0 0 0 10 0Zm0 5a3 3 0 1 1 0 6 3 3 0 0 1 0-6Zm0 13a8.949 8.949 0 0 1-4.951-1.488A3.987 3.987 0 0 1 9 13h2a3.987 3.987 0 0 1 3.951 3.512A8.949 8.949 0 0 1 10 18Z" />
                            </svg>
                        </a>
                        <div class="flex flex-col flex-1 mx-2 justify-center space-y-2">
                            <div class="flex flex-row">
                                <div class="w-20 h-2.5 bg-gray-300 rounded-full dark:bg-gray-700"></div>
                            </div>

                            <div class="flex flex-row">
                                <div class="w-32 h-2.5 bg-gray-300 rounded-full dark:bg-gray-700"></div>
                            </div>
                        </div>
                        <div class="flex items-center ">
                            <span class="text-sm text-gray-50 bg-gray-400 rounded-full px-6 py-4"></span>
                        </div>
                    </div>

                    <div class="flex flex-row select-auto px-4 py-2">
                        <span class="text-md w-full text-gray-900">
                            <div class="text-sm w-3/4 h-4 p-4 text-gray-50 bg-gray-300 rounded-full px-2 py-1">
                            </div>
                        </span>
                    </div>
                </div>

                <div class="flex flex-col divide-y">
                    <div class="flex flex-col select-auto px-4 py-2 text-start space-y-2">
                        <div class="text-sm w-1/6 h-4 p-2 text-gray-50 bg-gray-200 rounded-full px-2 py-1" />
                        <div class="text-sm w-3/6 h-4 p-2 text-gray-50 bg-gray-200 rounded-full px-2 py-1" />
                        <div class="text-sm w-4/6 h-4 p-2 text-gray-50 bg-gray-200 rounded-full px-2 py-1" />
                        <div class="text-sm w-2/6 h-4 p-2 text-gray-50 bg-gray-200 rounded-full px-2 py-1" />
                    </div>
                </div>
            </div>

            <div class="flex flex-row justify-between items-center justify-items-center p-4  bg-gray-100">
                <div class="text-sm w-2/6 h-4 p-2 text-gray-50 bg-gray-200 rounded-full px-2 py-1" />
            </div>

            <div class="grid grid-cols-1 divide-y">
                @for (var i = 0; i < 20; i++)
                {
                    <ReplySkeleton />
                }
            </div>
        </div>
    }

    <!-- reply input modal -->
    <div id="replyInputModal" tabindex="-1" aria-hidden="true"
         class="hidden fixed top-0 right-0 left-0 z-50 justify-center items-end md:items-center w-full !h-full md:inset-0 ">
        <div class="relative p-0 w-full md:p-4">
            <!-- Modal content -->
            <div class="relative p-4 bg-white rounded-t-lg  md:rounded-lg shadow dark:bg-gray-800">
                <div class="overflow-y-auto max-h-96">
                    <ReplyInput @ref="replyInput" ReplyCallback="OnReplyAsync" Replies="viewModel?.Replies"></ReplyInput>
                </div>
            </div>
        </div>
    </div>

    <!-- CallUp user modal -->
    <div id="callUpUserModal" tabindex="-1" aria-hidden="true"
         class="hidden fixed top-0 right-0 left-0 z-50 justify-center items-end md:items-center w-full  !h-full md:inset-0 ">
        <div class="relative mx-4 mt-8 mb-16 w-full max-w-xl md:h-auto md:m-4">
            <!-- Modal content -->
            <div class="relative p-4 bg-white rounded-lg shadow dark:bg-gray-800 sm:p-5">
                <!-- Modal header -->
                <div class="flex justify-between mb-4 rounded-t sm:mb-5 border-b-2 py-2">
                    <div class="text-lg text-gray-600 md:text-xl dark:text-white">
                        @if (callUpReplies.Count > 0)
                        {
                            <span class="font-semibold ">
                                @callUpReplies.First().UserName 之前的回复
                            </span>
                        }
                    </div>

                    <!-- close button -->
                    <button type="button"
                            class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white"
                            @onclick="HideModal">
                        <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none"
                             viewBox="0 0 14 14">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                        </svg>
                        <span class="sr-only">Close modal</span>
                    </button>
                </div>
                <!-- Modal body -->
                <div class="-mx-4 overflow-y-auto max-h-64">
                    <CascadingValue Value="viewModel">
                        <div class="grid grid-cols-1 divide-y">
                            @foreach (var item in callUpReplies)
                            {
                                var isOp = item.UserName == viewModel?.UserName;
                                <Reply @key="item.NormalizedId" ViewModel="@item" IsOp="isOp"
                                       CallUpCallback="OnCallUpAsync"/>
                            }
                        </div>
                    </CascadingValue>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "title")]
    public string? Title { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    private ApiService ApiService { get; set; } = null!;

    [Inject]
    private IJSRuntime JsRuntime { get; set; } = null!;

    [Inject]
    private IToastService Toast { get; set; } = null!;

    [Inject]
    private IBrowser Browser { get; set; } = null!;

    [Inject]
    private UtilsJsInterop UtilsJsInterop { get; set; } = null!;

    [Inject]
    private ChatGPTService ChatGPTService { get; set; } = null!;

    private TopicPageViewModel? viewModel;

    private DotNetObjectReference<TopicPage>? thisRef;
    private ElementReference? containerRef;
    private IJSObjectReference? interopModule;
    private IJSObjectReference? callUpUserModalReference;
    private IJSObjectReference? replyInputModalReference;
    private CollectionView<ReplyViewModel>? collectionView;

    private ReplyInput? replyInput;

    private CurrentUser? currentUser;
    private bool farFromTop;
    private List<ReplyViewModel> callUpReplies = new();
    private MarkupString? formattedContent;
    private MarkupStringView? formattedMarkupStringViewRef;

    private bool isFormatting;

    private bool IsFormatTopicShow
    {
        get
        {
            if (currentUser == null || !currentUser.IsAuthenticated
                || viewModel == null
                || !viewModel.Content.HasValue
                || viewModel.Content.Value.ToString().Length < 300)
            {
                return false;
            }

            var html = new HtmlDocument();
            html.LoadHtml(viewModel.Content.Value.ToString());
            var innerText = html.DocumentNode.InnerText;
            return innerText.Length > 300;
        }
    }

    private string? originUri;

    protected override async Task OnParametersSetAsync()
    {
        currentUser = new CurrentUser((await AuthenticationStateTask).User);
    }

    protected override Task OnInitializedAsync()
    {
        originUri = NavigationManager.Uri;
        thisRef = DotNetObjectReference.Create(this);
        return this.LoadAsync(1);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            interopModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import",
                "./_content/V2ex.Blazor.Shared/Pages/TopicPage.razor.js");
            callUpUserModalReference = await interopModule.InvokeAsync<IJSObjectReference>("initializeCallUpUserModal", containerRef, thisRef);
            replyInputModalReference = await interopModule.InvokeAsync<IJSObjectReference>("initializeReplyInputModal", containerRef, thisRef);
        }

        if (formattedContent != null)
        {
            await JsRuntime.InvokeVoidAsync("initAccordions");
        }
    }

    private async Task OnRefreshAsync()
    {
        viewModel = null;
        await this.LoadAsync(1);
        await Toast.Show("刷新成功");
    }

    private async Task LoadAsync(int page)
    {
        var topicInfo = await this.ApiService.GetTopicDetail(Id.ToString(), page);
        if (topicInfo == null)
        {
            return;
        }

        if(this.viewModel == null)
        {
            viewModel = TopicPageViewModel.Create(topicInfo);
        }
        viewModel.Update(topicInfo);
    }

    private async Task OnRemainingReached()
    {
        if (viewModel == null)
        {
            return;
        }

        if (viewModel.CurrentPage >= viewModel.MaximumPage)
        {
            return;
        }
        await this.LoadAsync(this.viewModel.CurrentPage + 1);
    }

    private Task OnScroll(ScrollEventArgs e)
    {
        farFromTop = e.ScrollTop >= 100;

        return Task.CompletedTask;
    }

    private async Task ScrollToTop()
    {
        if (collectionView == null)
        {
            return;
        }

        await collectionView.ScrollToTop();
    }

    private async Task OnMentionedAsync(int floor)
    {
        var reply = viewModel?.Replies.FirstOrDefault(r => r.Floor == floor);
        if (reply == null)
        {
            return;
        }
        await this.ShowReplyInput($"@{reply.UserName} #{floor}");
    }

    private async Task OnCallUpAsync(CallUpModel model)
    {
        if (interopModule == null || viewModel == null || callUpUserModalReference == null)
        {
            return;
        }
        callUpReplies.Clear();
        foreach (var reply in this.viewModel.Replies)
        {
            if (reply.Floor < model.Floor && reply.UserName == model.UserName)
            {
                callUpReplies.Add(reply);
            }
        }

        await callUpUserModalReference.InvokeVoidAsync("show");
    }

    private async Task HideModal()
    {
        if (callUpUserModalReference == null)
        {
            return;
        }

        await callUpUserModalReference.InvokeVoidAsync("hide");
    }


    [JSInvokable]
    public Task OnCallUpUserModalShowJsInvoke()
    {
        this.NavigationManager.NavigateTo(originUri + $"#modal=callUp");
        return Task.CompletedTask;
    }

    [JSInvokable]
    public async Task OnCallUpUserModalHideJsInvoke()
    {
        callUpReplies.Clear();
        // we should remove the hash from the uri, to clear the navigation history
        await this.UtilsJsInterop.GoBack();
    }

    [JSInvokable]
    public async Task OnModalReplyShowJsInvoke()
    {
        if(replyInput == null)
        {
            return;
        }
        await replyInput.FocusAsync();
    }

    private async Task OnReplyAsync(string content)
    {
        if (string.IsNullOrEmpty(content) || this.viewModel?.Once == null)
        {
            return;
        }

        TopicInfo topicInfo;
        try
        {
            topicInfo = await this.ApiService.ReplyTopic(this.Id.ToString(), content, this.viewModel.Once);
        }
        catch (Exception)
        {
            // todo handle the reply error.
            await this.Toast.Show("Can not reply topic");
            return;
        }

        viewModel.Update(topicInfo);
        await this.Toast.Show("回复成功");

        // hide the modal
        if (replyInputModalReference == null)
        {
            return;
        }
        await replyInputModalReference.InvokeVoidAsync("hide");
    }

    private async Task ShowReplyInput(string? content = null)
    {
        if (replyInputModalReference == null)
        {
            return;
        }

        if (content != null && replyInput != null)
        {
            await replyInput.InsertTextAsync(content);
            await replyInput.FocusAsync();
        }

        await replyInputModalReference.InvokeVoidAsync("show");
    }

    private Task OnExternalLickClicked(Uri uri)
    {
        return Browser.OpenAsync(uri);
    }

    private bool isIgnoring, isFavoriting, isThanking;

    private async Task UnIgnoreTopic()
    {
        if (viewModel?.Once == null)
        {
            return;
        }
        try
        {
            isIgnoring = true;
            var topicInfo = await this.ApiService.UnignoreTopic(this.Id.ToString(), this.viewModel.Once);
            viewModel.Ignored = false;
            viewModel.Once = topicInfo.Once;
            await this.Toast.Show("取消忽略成功");
        }
        catch (Exception exception)
        {
            await this.Toast.Show(exception.Message);
        }
        finally
        {
            isIgnoring = false;
        }
    }

    private async Task IgnoreTopic()
    {
        if (viewModel?.Once == null)
        {
            return;
        }
        try
        {
            isIgnoring = true;
            var topicInfo = await this.ApiService.IgnoreTopic(this.Id.ToString(), this.viewModel.Once);
            viewModel.Ignored = true;
            viewModel.Once = topicInfo.Once;
            await this.Toast.Show("忽略成功");
        }
        catch (Exception exception)
        {
            await this.Toast.Show(exception.Message);
        }
        finally
        {
            isIgnoring = false;
        }
    }

    private async Task UnfavoriteTopic()
    {
        if (viewModel?.Once == null)
        {
            return;
        }
        try
        {
            isFavoriting = true;
            var topicInfo = await this.ApiService.UnfavoriteTopic(this.Id.ToString(), this.viewModel.Once);
            viewModel.Liked = false;
            viewModel.Once = topicInfo.Once;
            viewModel.TopicStats = topicInfo.TopicStats;
            await this.Toast.Show("取消收藏成功");
        }
        catch (Exception exception)
        {
            await this.Toast.Show(exception.Message);
        }
        finally
        {
            isFavoriting = false;
        }
    }

    private async Task FavoriteTopic()
    {
        if (viewModel?.Once == null)
        {
            return;
        }
        try
        {
            isFavoriting = true;
            var topicInfo = await this.ApiService.FavoriteTopic(this.Id.ToString(), this.viewModel.Once);
            viewModel.Liked = true;
            viewModel.Once = topicInfo.Once;
            viewModel.TopicStats = topicInfo.TopicStats;

            await this.Toast.Show("收藏成功");
        }
        catch (Exception exception)
        {
            await this.Toast.Show(exception.Message);
        }
        finally
        {
            isFavoriting = false;
        }
    }

    private async Task ThankTopic()
    {
        if (viewModel?.Once == null)
        {
            return;
        }
        try
        {
            isThanking = true;
            var result = await this.ApiService.ThankCreator(this.Id.ToString(), this.viewModel.Once);

            if (result == null)
            {
                throw new InvalidOperationException("Can not thank creator");
            }

            if (!result.Success)
            {
                throw new InvalidOperationException(result.Message);
            }
            viewModel.Thanked = true;
            viewModel.Thanks += 1;
            if (result.Once > 0)
            {
                viewModel.Once = result.Once.ToString();
            }
            await this.Toast.Show("感谢成功");
        }
        catch (Exception exception)
        {
            await this.Toast.Show(exception.Message);
        }
        finally
        {
            isThanking = false;
        }
    }

    private async Task FormatTopicAsync()
    {
        try
        {
            isFormatting = true;
            var stream = await this.ChatGPTService.FormatTopicAsync(this.Id.ToString());

            formattedContent = null;
            await this.InvokeAsync(this.StateHasChanged);

            var buffer = new byte[1024];
            var content = new StringBuilder();
            var read = 0;
            while ((read = await stream.ReadAsync(buffer)) > 0)
            {
                content.Append(Encoding.UTF8.GetString(buffer, 0, read));
                formattedContent = (MarkupString)content.ToString();
                await this.InvokeAsync(this.StateHasChanged);
            }

            if (formattedMarkupStringViewRef != null)
            {
                await formattedMarkupStringViewRef.RelaunchContentAsync();
            }
        }
        catch(InvalidOperationException)
        {
            await this.Toast.Show("无法连接到服务");
        }
        catch(Exception exception)
        {
            await this.Toast.Show(exception.Message);
        }
        finally
        {
            isFormatting = false;
        }

    }

    public void Dispose()
    {
    }
}