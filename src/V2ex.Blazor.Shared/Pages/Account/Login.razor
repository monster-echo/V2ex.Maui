@page "/account/login"
<HeadTitle Title="登录"></HeadTitle>
<LoadingBox Load="LoadAsync">
    <Content>
        <section class="bg-gray-50 dark:bg-gray-900 h-full">
            <div class="flex flex-col items-center justify-center px-6 py-8 mx-auto h-full lg:py-0 -mt-16">
                <div
                    class="w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700">
                    <div class="p-6 space-y-4 md:space-y-6 sm:p-8">
                        <h1
                            class="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
                            登录你的 <strong>V2ex</strong> 账号
                        </h1>
                        <form class="space-y-4 md:space-y-6">
                            <div>
                                <label for="username"
                                    class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">用户名</label>
                                <input type="text" name="username" id="username"
                                    class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-gray-600 focus:border-gray-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-gray-500 dark:focus:border-gray-500"
                                    placeholder="用户名" required="" @bind="UserName">
                            </div>
                            <div>
                                <label for="password"
                                    class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">密码</label>
                                <input type="password" name="password" id="password" placeholder="••••••••"
                                    class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-gray-600 focus:border-gray-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-gray-500 dark:focus:border-gray-500"
                                    required="" @bind="Password">
                            </div>

                            <div>
                                <label for="captcha"
                                    class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">验证码</label>

                                <div class="flex flex-row justify-between items-center space-x-2">
                                    <input type="captcha"
                                        class="h-auto bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-gray-600 focus:border-gray-600 block w-1/2 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-gray-500 dark:focus:border-gray-500"
                                        name="captcha" id="captcha" placeholder="" required="" @bind="Captcha">

                                    @if (!string.IsNullOrEmpty(captchaImageBase64))
                                    {
                                        <img class="w-1/2 my-2.5 cursor:pointer rounded-lg" @onclick="RefreshCaptcha"
                                            src="@captchaImageBase64" />
                                    }
                                    else
                                    {
                                    // todo: load a cache image from local preference.
                                        <img class="w-1/2 my-2.5 cursor:pointer rounded-lg"
                                            src="https://v2ex.com/_captcha" />
                                    }
                                </div>
                            </div>
                            @if (AppConstants.IsDebug)
                            {
                                // todo: implement google login.
                                <div class="flex flex-row">
                                    <a class="ml-auto underline underline-offset-1" href="#">使用 Google 登录</a>
                                </div>
                            }
                            

                            @if (!string.IsNullOrEmpty(Error))
                            {
                                <div class="p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400"
                                    role="alert">
                                    @Error
                                </div>
                            }

                            @if (isLogging)
                            {
                                <button disabled type="button"
                                    class="w-full text-white bg-gray-400 hover:bg-gray-500 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-gray-600 dark:hover:bg-gray-700">
                                    <svg aria-hidden="true" role="status"
                                        class="inline w-4 h-4 me-3 text-white animate-spin" viewBox="0 0 100 101"
                                        fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path
                                            d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                                            fill="#E5E7EB" />
                                        <path
                                            d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                                            fill="currentColor" />
                                    </svg>
                                    登录中...
                                </button>
                            }
                            else
                            {
                                <button type="button"
                                    class="w-full text-white bg-gray-400 hover:bg-gray-500 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-gray-600 dark:hover:bg-gray-700"
                                    @onclick="LoginAsync">
                                    登录
                                </button>
                            }
                        </form>
                    </div>
                </div>
            </div>
        </section>
    </Content>
</LoadingBox>

@code {

    [Inject]
    private Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider
    {
        get;
        set;
    } = null!;

    [Inject]
    private ApiService ApiService { get; set; } = null!;
    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;
    [Inject]
    private ILogger<Login> Logger { get; set; } = null!;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private string? UserName { get; set; }
    private string? Password { get; set; }
    private string? Captcha { get; set; }

    private string? Error { get; set; }

    private LoginParameters? loginParameters;

    private string? captchaImageBase64;

    private bool isLogging;

    private async Task LoadAsync()
    {
        loginParameters = await ApiService.GetLoginParameters();
        await RefreshCaptcha();
    }

    private async Task RefreshCaptcha()
    {
        if (loginParameters == null)
        {
            return;
        }
        var imageBytes = await this.ApiService.GetCaptchaImage(loginParameters);
        captchaImageBase64 = $"data:image/png;base64,{Convert.ToBase64String(imageBytes)}";
    }

    private async Task LoginAsync()
    {
        if (loginParameters == null)
        {
            return;
        }
        if (string.IsNullOrEmpty(UserName) ||
        string.IsNullOrEmpty(Password) ||
        string.IsNullOrEmpty(Captcha))
        {
            this.Error = "用户名、密码不能为空";

            return;
        }

        try
        {
            isLogging = true;

            this.ShouldRender();

            var result = await ApiService.Login(loginParameters, UserName, Password, Captcha);

            if (result.CurrentUser == null)
            {
                throw new InvalidOperationException("Can not get user info.");
            }
            await ((V2exAuthenticationStateProvider)this.AuthenticationStateProvider).LoginAsync(
            result.CurrentUser
            );
            this.NavigationManager.NavigateTo(this.ReturnUrl ?? "/");
        }
        catch (Exception exception)
        {
            await this.LoadAsync();
            this.Logger.LogWarning(exception, "Login error");
            this.Error = exception.Message;
        }
        finally
        {
            isLogging = false;
            this.ShouldRender();
        }
    }
}